
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\bayesian_networks\plot_bayes_net_exp2_1.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_bayesian_networks_plot_bayes_net_exp2_1.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_bayesian_networks_plot_bayes_net_exp2_1.py:


Experiment 2: Model Learning
===========================================

The aim of this experiment was to remove multiple features from the data set
satisfying the Missing At Random (MAR) assumption and using the remainining 
features to predict its values to emulate an actual imputer using Bayesian
Networks.

The data was removed in proportions: 10%, 30% and 50%.

.. GENERATED FROM PYTHON SOURCE LINES 15-18

-------------------------------------
Libraries import
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 18-58

.. code-block:: default
   :lineno-start: 19


    # Libraries generic
    import numpy as np
    import pandas as pd
    import sklearn
    import seaborn as sns
    import matplotlib.pyplot as plt
    import warnings
    warnings.filterwarnings("ignore")
    import networkx as nx

    # Libraries sklearn
    from sklearn.pipeline import Pipeline
    from sklearn.model_selection import KFold
    from sklearn.model_selection import cross_validate
    from sklearn.preprocessing import StandardScaler, KBinsDiscretizer
    from sklearn.model_selection import train_test_split

    # Regressors
    from sklearn.linear_model import LinearRegression
    from sklearn.linear_model import Ridge
    from sklearn.linear_model import BayesianRidge
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.tree import DecisionTreeRegressor
    from sklearn.ensemble import ExtraTreesRegressor
    from sklearn.linear_model import SGDRegressor
    from sklearn.neighbors import KNeighborsRegressor
    from sklearn.neural_network import MLPRegressor
    from xgboost import XGBRegressor

    # Metrics
    from sklearn.metrics import make_scorer
    from sklearn.metrics import mean_squared_error

    # Custom Packages
    from labimputer.utils.load_dataset import remove_data_outliers
    from labimputer.utils.iter_imp import corr_pairs, get_score_statistics, rmse, norm_rmse, rmsle, get_test_scores, nae, get_best_models, get_cvts_delta
    from labimputer.core.iter_imp import IterativeImputerRegressor, SimpleImputerRegressor
    from labimputer.core.bayes_net import BNRegressor, EMImputer








.. GENERATED FROM PYTHON SOURCE LINES 59-62

-------------------------------------
Data import 
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-95

.. code-block:: default
   :lineno-start: 63


    # Set relative data path and set FBC panel list
    path_data = '../resources/datasets/nhs/Transformed_First_FBC_dataset.csv'

    # Define FBC panel for the experiment
    FBC_CODES = sorted(["EOS", "MONO", "BASO", "NEUT", "RBC", "WBC", 
                    "MCHC", "MCV", "LY", "HCT", "RDW", "HGB", 
                    "MCH", "PLT", "MPV", "NRBCA"])

    RBC_ANALYTES = ['HCT', 'HGB', 'RBC', 'MCH', 'MCV', 'MCHC', 'RDW']
    WBC_ANALYTES = ['EOS', 'MONO', 'LY', 'NEUT', 'WBC']
    PLT_ANALYTES = ['PLT', 'MPV']

    # Read data and drop Nan _uid records
    df = pd.read_csv(path_data).dropna(subset=['pid'])

    # Reset the index to easily count all test records
    df.reset_index(drop=True, inplace=True)

    # Obtain the biomarkers DataFrame only
    raw_data = df[FBC_CODES].dropna(subset=FBC_CODES)

    # Remove outliers from dataset
    complete_profiles, _ = remove_data_outliers(raw_data)

    # Constant variables to drop
    DROP_FEATURES = ['BASO', 'NRBCA']

    # Complete profiles for complete case analysis
    complete_profiles = complete_profiles.drop(DROP_FEATURES, axis=1)

    FBC_PANEL = complete_profiles.columns








.. GENERATED FROM PYTHON SOURCE LINES 96-99

-------------------------------------
Define tuned estimators
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 99-106

.. code-block:: default
   :lineno-start: 99

    _TUNED_ESTIMATORS = {
        'median': SimpleImputerRegressor(
            strategy='median'
        ),
        'BN': BNRegressor(FBC_PANEL)
    }








.. GENERATED FROM PYTHON SOURCE LINES 107-110

-------------------------------------
Correlation matrix
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 110-120

.. code-block:: default
   :lineno-start: 111


    # Calculate correlation matrix using Pearson Correlation Coefficient
    corr_mat = complete_profiles.corr(method='pearson')

    # Show
    print("\nData:")
    print(complete_profiles)
    print("\nCorrelation (pearson):")
    print(corr_mat)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Data:
            EOS   HCT    HGB   LY   MCH   MCHC    MCV  MONO   MPV  NEUT    PLT   RBC   RDW   WBC
    0       0.0  0.39  125.0  0.7  29.6  320.0   92.6   0.4   8.6   3.9  202.0  4.23  15.1   5.0
    6       0.0  0.37  113.0  1.1  32.0  307.0  104.0   0.7   7.4   4.0  257.0  3.53  15.1   5.9
    7       0.1  0.34  110.0  0.8  32.2  320.0  101.0   0.3   8.0   3.0  282.0  3.40  13.8   4.2
    8       0.1  0.34  108.0  0.7  32.5  321.0  101.0   0.3   8.1   3.4  282.0  3.32  14.4   4.5
    9       0.2  0.34  109.0  0.7  32.7  320.0  102.0   0.6   8.7   4.6  298.0  3.34  14.1   6.1
    ...     ...   ...    ...  ...   ...    ...    ...   ...   ...   ...    ...   ...   ...   ...
    101167  0.1  0.42  138.0  2.1  29.8  328.0   90.8   0.4   9.6   4.4  210.0  4.62  11.3   7.1
    101169  0.2  0.38  128.0  2.0  29.5  334.0   88.2   0.4   9.3   4.9  208.0  4.33  12.9   7.6
    101170  0.2  0.42  134.0  2.2  28.7  323.0   88.8   0.4   8.9   4.0  295.0  4.67  13.9   6.8
    101173  0.0  0.37  122.0  2.1  29.0  325.0   89.4   0.6  10.5   4.5  247.0  4.19  11.1   7.2
    101174  0.0  0.37  121.0  1.2  30.1  326.0   92.4   0.8   9.2   8.1  204.0  4.01  11.7  10.1

    [56271 rows x 14 columns]

    Correlation (pearson):
               EOS       HCT       HGB        LY       MCH      MCHC  ...       MPV      NEUT       PLT       RBC       RDW       WBC
    EOS   1.000000  0.075691  0.063382  0.289178 -0.046216 -0.073132  ... -0.008346 -0.077021  0.148320  0.076247 -0.029017  0.063383
    HCT   0.075691  1.000000  0.983795  0.368346  0.018124 -0.009970  ...  0.156687 -0.147780  0.044596  0.932916 -0.445215 -0.034098
    HGB   0.063382  0.983795  1.000000  0.367455  0.084460  0.160611  ...  0.148419 -0.142903  0.030526  0.921963 -0.479547 -0.030376
    LY    0.289178  0.368346  0.367455  1.000000 -0.079429  0.021764  ...  0.133033 -0.067306  0.227641  0.381424 -0.258299  0.242921
    MCH  -0.046216  0.018124  0.084460 -0.079429  1.000000  0.391104  ... -0.073755 -0.036335 -0.169143 -0.301421 -0.354513 -0.058005
    MCHC -0.073132 -0.009970  0.160611  0.021764  0.391104  1.000000  ... -0.041123  0.014154 -0.087255  0.002774 -0.237056  0.015221
    MCV  -0.016068  0.024410  0.016983 -0.097091  0.902952 -0.040685  ... -0.061824 -0.046127 -0.143448 -0.328603 -0.273143 -0.070355
    MONO  0.176592 -0.011767 -0.011822  0.228941 -0.007282 -0.006352  ...  0.006449  0.437707  0.191892 -0.011525  0.000838  0.565965
    MPV  -0.008346  0.156687  0.148419  0.133033 -0.073755 -0.041123  ...  1.000000 -0.015518 -0.329940  0.169995 -0.129583  0.021949
    NEUT -0.077021 -0.147780 -0.142903 -0.067306 -0.036335  0.014154  ... -0.015518  1.000000  0.204307 -0.125506  0.043472  0.946863
    PLT   0.148320  0.044596  0.030526  0.227641 -0.169143 -0.087255  ... -0.329940  0.204307  1.000000  0.089001 -0.050207  0.275886
    RBC   0.076247  0.932916  0.921963  0.381424 -0.301421  0.002774  ...  0.169995 -0.125506  0.089001  1.000000 -0.317913 -0.009884
    RDW  -0.029017 -0.445215 -0.479547 -0.258299 -0.354513 -0.237056  ... -0.129583  0.043472 -0.050207 -0.317913  1.000000 -0.031387
    WBC   0.063383 -0.034098 -0.030376  0.242921 -0.058005  0.015221  ...  0.021949  0.946863  0.275886 -0.009884 -0.031387  1.000000

    [14 rows x 14 columns]




.. GENERATED FROM PYTHON SOURCE LINES 121-124

-------------------------------------
Split into train-test
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 124-139

.. code-block:: default
   :lineno-start: 125


    SEED = 8

    # Train-test split of 80:20
    train_set, test_set = train_test_split(complete_profiles, shuffle=False, test_size=0.2, random_state=8)

    # Use copy of the original train and test set
    train_copy, test_copy = train_set.copy(), test_set.copy()

    # Remove 10, 30 or 50% of values depending upon requirements
    for col in train_copy.columns:
        train_copy.loc[train_set.sample(frac=0.1).index, col] = np.nan
        test_copy.loc[test_set.sample(frac=0.1).index, col] = np.nan









.. GENERATED FROM PYTHON SOURCE LINES 140-143

-------------------------------------
Five fold cross validation (CVTS)
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 143-239

.. code-block:: default
   :lineno-start: 144


    # Number of splits
    n_splits = 5

    # Create Kfold instance
    skf = KFold(n_splits=n_splits, shuffle=False)

    # Scoring
    scoring = {
        'nmae': 'neg_mean_absolute_error', # MAE
        'nmse': 'neg_mean_squared_error',       # MSE
        'nrmse': 'neg_root_mean_squared_error', # RMSE
        'rmsle': make_scorer(rmsle), # RMSLE
        'norm_rmse': make_scorer(norm_rmse), # NRMSE
    }

    # Compendium of results
    bn_results = pd.DataFrame()

    # Create a list of estimators
    ESTIMATORS = [
        # 'median',
        # 'BN',
    ]

    # Loop over each estimator
    for i, est in enumerate(ESTIMATORS):

        # Dictionary for storing all test scores on hold
        test_scores = {}

        # Check if estimator has been defined else skip
        if est not in _TUNED_ESTIMATORS:
            continue
    
        # Select estimator
        estimator = _TUNED_ESTIMATORS[est]
    
        if est != 'median':
            imputer = IterativeImputerRegressor(estimator=estimator,
                                                min_value=0, 
                                                max_iter=10000)
        else:
            imputer = estimator

        # Loop over each analyte
        for biomarker in train_set:

            # Generate new train-test for each run
            aux_train = train_set.copy()
            aux_test = test_set.copy()

            # Define independent (X_train) and dependent (y_train) variables
            X_train = aux_train[[x for x in aux_train.columns if x != biomarker]]
            y_train = aux_train[biomarker]

            # Define same variables with test set
            X_test = aux_test[[x for x in aux_test.columns if x != biomarker]]
            y_test = aux_test[biomarker]

            # Information
            print("\n%s. Evaluating... %s for biomarker... %s" % (i, est, biomarker))

            # Create pipeline
            pipe = Pipeline(steps=[ ('pre', EMImputer(max_iter=10, epsilon=10)),
                                    ('dis', KBinsDiscretizer(n_bins=5, encode='ordinal', strategy='uniform')),
                                    (est, imputer)],
                            verbose=True)

            # Obtain scores for each fold using cross_validate
            scores = cross_validate(pipe, 
                                    X_train, 
                                    y_train, 
                                    scoring=scoring, 
                                    cv=skf, 
                                    return_train_score=True, 
                                    n_jobs=-1, 
                                    verbose=0)

            # Fit on training set 
            pipe.fit(X_train, y_train)

            # Generate x, y test 
            y_pred = pipe.predict(X_test)

            # Compendium of all test scores
            test_scores[biomarker] = get_test_scores(y_test, y_pred)

            # Extract results
            results = pd.DataFrame(scores)
            results.index = ['%s_%s_%s' % (biomarker, est, j)
                for j in range(results.shape[0])]
        
            # Add to compendium of results
            bn_results = bn_results.append(results)








.. GENERATED FROM PYTHON SOURCE LINES 240-243

-------------------------------------
Save results
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 243-247

.. code-block:: default
   :lineno-start: 244


    # Save
    # bn_results.to_csv('datasets/bn_mult_cv_results.csv')








.. GENERATED FROM PYTHON SOURCE LINES 248-251

-------------------------------------
Plot BN structure
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 251-295

.. code-block:: default
   :lineno-start: 252


    # Make a copy of the training set
    aux_train = train_set.copy()

    # Discretise data into five bins
    dis = KBinsDiscretizer(n_bins=5, encode='ordinal', strategy='uniform')

    # Fit transform the discretised data
    Xt = pd.DataFrame(dis.fit_transform(aux_train), columns=FBC_PANEL)

    # Remove 10% of values
    for col in Xt.columns:
        Xt.loc[Xt.sample(frac=0.1).index, col] = np.nan

    # Initialise the regressor with pre-defined edges (based on previous testing)
    m1 = BNRegressor(FBC_PANEL)

    # Learn the data using the edges
    m1.fit(Xt)

    # Plot
    plt.figure(figsize=(10,8))

    # Define colour map for coding
    color_map = []

    for node in m1:

        if node in RBC_ANALYTES:
            color_map.append('salmon')
        elif node in WBC_ANALYTES:
            color_map.append('skyblue')
        else:
            color_map.append('plum')

    # Draw the graph using networkx package
    nx.draw(m1, with_labels=True, 
        node_size = 3000, 
        node_color=color_map, 
        edgecolors='black', 
        font_weight='bold', 
        width=1.5)

    # Show
    plt.show()


.. image:: /_examples/bayesian_networks/images/sphx_glr_plot_bayes_net_exp2_1_001.png
    :alt: plot bayes net exp2 1
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|                                                                                                | 0/1000000 [00:00<?, ?it/s]      0%|                                                                                    | 1/1000000 [00:01<400:39:38,  1.44s/it]      0%|                                                                                    | 2/1000000 [00:01<184:54:37,  1.50it/s]      0%|                                                                                    | 3/1000000 [00:01<115:01:24,  2.41it/s]      0%|                                                                                     | 4/1000000 [00:01<80:59:29,  3.43it/s]      0%|                                                                                     | 5/1000000 [00:01<62:22:17,  4.45it/s]      0%|                                                                                     | 6/1000000 [00:02<51:43:05,  5.37it/s]      0%|                                                                                     | 7/1000000 [00:02<45:08:13,  6.15it/s]      0%|                                                                                     | 8/1000000 [00:02<40:28:12,  6.86it/s]      0%|                                                                                     | 9/1000000 [00:02<37:57:06,  7.32it/s]      0%|                                                                                    | 10/1000000 [00:02<35:48:06,  7.76it/s]      0%|                                                                                    | 11/1000000 [00:02<34:05:10,  8.15it/s]      0%|                                                                                    | 13/1000000 [00:02<31:02:38,  8.95it/s]      0%|                                                                                    | 14/1000000 [00:02<30:45:59,  9.03it/s]      0%|                                                                                    | 16/1000000 [00:03<27:52:17,  9.97it/s]      0%|                                                                                    | 17/1000000 [00:03<29:13:59,  9.50it/s]      0%|                                                                                    | 18/1000000 [00:03<30:01:02,  9.25it/s]      0%|                                                                                    | 19/1000000 [00:03<31:15:33,  8.89it/s]      0%|                                                                                    | 20/1000000 [00:03<35:39:57,  7.79it/s]      0%|                                                                                    | 21/1000000 [00:03<34:37:37,  8.02it/s]      0%|                                                                                    | 22/1000000 [00:03<35:34:33,  7.81it/s]      0%|                                                                                    | 23/1000000 [00:03<38:25:28,  7.23it/s]      0%|                                                                                    | 26/1000000 [00:04<25:25:09, 10.93it/s]      0%|                                                                                    | 26/1000000 [00:04<44:30:03,  6.24it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.273 seconds)


.. _sphx_glr_download__examples_bayesian_networks_plot_bayes_net_exp2_1.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_bayes_net_exp2_1.py <plot_bayes_net_exp2_1.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_bayes_net_exp2_1.ipynb <plot_bayes_net_exp2_1.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
