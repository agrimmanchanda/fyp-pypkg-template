
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\load_dataset\plot_corr_networks.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_load_dataset_plot_corr_networks.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_load_dataset_plot_corr_networks.py:


Network graphs to visualise correlations
===========================================

Using ``networkx`` library to visualise biomarker correlations

.. GENERATED FROM PYTHON SOURCE LINES 9-10

Import the relevant libraries first

.. GENERATED FROM PYTHON SOURCE LINES 10-19

.. code-block:: default
   :lineno-start: 10

    import numpy as np 
    import pandas as pd
    import networkx as nx
    import matplotlib.pyplot as plt
    import seaborn as sns
    import warnings
    warnings.filterwarnings("ignore")
    from pkgname.utils.widgets import TidyWidget








.. GENERATED FROM PYTHON SOURCE LINES 20-23

-------------------------------------
Data import 
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 23-36

.. code-block:: default
   :lineno-start: 24


    # Set relative data path and set FBC panel list
    path_data = 'datasets/Transformed_First_FBC_dataset.csv'

    FBC_CODES = ["EOS", "MONO", "BASO", "NEUT", "RBC", "WBC", 
                    "MCHC", "MCV", "LY", "HCT", "RDW", "HGB", 
                    "MCH", "PLT", "MPV", "NRBCA"]

    # Read data and drop Nan _uid records
    df = pd.read_csv(path_data).dropna(subset=['pid'])

    df.reset_index(drop=True, inplace=True)








.. GENERATED FROM PYTHON SOURCE LINES 37-40

-------------------------------------
Split data into input and output
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 40-100

.. code-block:: default
   :lineno-start: 41


    # Obtain the biomarkers DataFrame only
    biomarkers_df = df[FBC_CODES].dropna(subset=FBC_CODES)

    biomarkers_original_df_copy = biomarkers_df.copy(deep=True)

    biomarkers_data = biomarkers_df.values

    # Calculate correlation matrix using Pearson Correlation Coefficient
    corr_mat = biomarkers_df.dropna().corr(method='pearson')

    # Create a mask
    corr_mask = np.triu(np.ones_like(corr_mat, dtype=bool))

    # Plot seaborn heatmap, histogram and PDF of correlation values.

    plt.figure(figsize=(20,8))
    plt.subplot(1,2,1)
    plt.title('Correlation Matrix for FBC panel', fontweight='bold', fontsize=15)

    min_v = corr_mat.values.min()
    ax = sns.heatmap(
        corr_mat,
        mask=corr_mask, 
        vmin=min_v, vmax=1, center=0,
        cmap=sns.diverging_palette(20, 220, n=200),
        square=True,
        annot = True,
        annot_kws={"fontsize":8}
    )
    ax.set_xticklabels(
        ax.get_xticklabels(),
        rotation=45,
        horizontalalignment='right',
        fontsize=15
    );

    ax.set_yticklabels(
        ax.get_yticklabels(),
        fontsize=15
    );

    ax.set_yticklabels(biomarkers_df.columns)
    ax.set_xticklabels(biomarkers_df.columns)

    plt.subplot(1,2,2)
    plt.title('Histogram and PDF of FBC panel correlations', fontweight='bold', fontsize=15)
    sns.distplot(corr_mat.values.reshape(-1), bins=50, kde_kws={'color': 'red','linewidth': 2, }, hist_kws={'edgecolor':'black'})
    plt.ylabel("Density", fontsize=18)
    plt.xlabel("Correlation values", fontsize=15)
    plt.xticks(fontsize=15)
    plt.yticks(fontsize=15)
    plt.grid()
    plt.show()

    # Print the mean correlation value for each biomarker

    print("\nSorted mean correlation values by biomarkers:")
    print(corr_mat.mean(1).sort_values(ascending=False))




.. image:: /_examples/load_dataset/images/sphx_glr_plot_corr_networks_001.png
    :alt: Correlation Matrix for FBC panel, Histogram and PDF of FBC panel correlations
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Sorted mean correlation values by biomarkers:
    MCHC     0.382143
    MCV      0.339476
    MCH      0.333753
    HCT      0.310918
    HGB      0.309988
    RBC      0.288058
    WBC      0.284260
    MPV      0.264927
    MONO     0.247103
    NEUT     0.224849
    RDW      0.203782
    PLT      0.175840
    BASO     0.174083
    LY       0.162450
    EOS      0.141370
    NRBCA    0.086162
    dtype: float64




.. GENERATED FROM PYTHON SOURCE LINES 101-104

-------------------------------------
Plotting graphs using networkx
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 104-135

.. code-block:: default
   :lineno-start: 105


    thresholds = [x/10 for x in range(4,10)]

    # for each threshold value
    for threshold in thresholds:

        # Transform correlation matrix in a links data frame (3 columns only):
        links = corr_mat.stack().reset_index()
        links.columns = ['var1', 'var2', 'value']
    
        # Keep only correlation over a threshold and remove self correlation (cor(A,A)=1)
        idx1 = links['value'] > threshold # above threshold 
        idx2 = links['var1'] != links['var2'] # self correlation
        links_filtered=links[idx1 & idx2]
    
        # Build graph
        G=nx.from_pandas_edgelist(links_filtered, 'var1', 'var2', 'value')

        # Adjust position for spring layout
        pos = nx.spring_layout(G, k=0.45, iterations=20)

        # Set plot parameters and draw networks
        plt.figure(figsize=(15,5))
        plt.title(f'Graph with Weight Threshold: {threshold}', fontweight='bold', fontsize=16)
        nx.draw(G, with_labels=True,pos=pos, node_color='orange', node_size=1500, linewidths=2, font_size=12, edge_color='black', edgecolors='black')
        plt.axis('off')
        axis = plt.gca()
        axis.set_xlim([1.2*x for x in axis.get_xlim()])
        axis.set_ylim([1.2*y for y in axis.get_ylim()])
    
        # Show
        plt.show()


.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_examples/load_dataset/images/sphx_glr_plot_corr_networks_002.png
          :alt: Graph with Weight Threshold: 0.4
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/load_dataset/images/sphx_glr_plot_corr_networks_003.png
          :alt: Graph with Weight Threshold: 0.5
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/load_dataset/images/sphx_glr_plot_corr_networks_004.png
          :alt: Graph with Weight Threshold: 0.6
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/load_dataset/images/sphx_glr_plot_corr_networks_005.png
          :alt: Graph with Weight Threshold: 0.7
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/load_dataset/images/sphx_glr_plot_corr_networks_006.png
          :alt: Graph with Weight Threshold: 0.8
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/load_dataset/images/sphx_glr_plot_corr_networks_007.png
          :alt: Graph with Weight Threshold: 0.9
          :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.771 seconds)


.. _sphx_glr_download__examples_load_dataset_plot_corr_networks.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_corr_networks.py <plot_corr_networks.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_corr_networks.ipynb <plot_corr_networks.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
