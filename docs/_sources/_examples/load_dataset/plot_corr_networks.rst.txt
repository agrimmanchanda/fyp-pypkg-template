
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\load_dataset\plot_corr_networks.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_load_dataset_plot_corr_networks.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_load_dataset_plot_corr_networks.py:


Network graphs to visualise correlations
===========================================

Using ``networkx`` library to visualise biomarker correlations

.. GENERATED FROM PYTHON SOURCE LINES 9-10

Import the relevant libraries first

.. GENERATED FROM PYTHON SOURCE LINES 10-19

.. code-block:: default
   :lineno-start: 10

    import numpy as np 
    import pandas as pd
    import networkx as nx
    import matplotlib.pyplot as plt
    import seaborn as sns
    import warnings
    warnings.filterwarnings("ignore")
    from pkgname.utils.load_dataset import *








.. GENERATED FROM PYTHON SOURCE LINES 20-23

-------------------------------------
Data import 
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 23-36

.. code-block:: default
   :lineno-start: 24


    # Set relative data path and set FBC panel list
    path_data = '../resources/datasets/nhs/Transformed_First_FBC_dataset.csv'

    FBC_CODES = ["EOS", "MONO", "BASO", "NEUT", "RBC", "WBC", 
                    "MCHC", "MCV", "LY", "HCT", "RDW", "HGB", 
                    "MCH", "PLT", "MPV", "NRBCA"]

    # Read data and drop Nan _uid records
    df = pd.read_csv(path_data).dropna(subset=['pid'])

    df.reset_index(drop=True, inplace=True)








.. GENERATED FROM PYTHON SOURCE LINES 37-40

-------------------------------------
Remove data outliers
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 40-57

.. code-block:: default
   :lineno-start: 41


    # Obtain the biomarkers DataFrame only
    biomarkers_df = df[FBC_CODES].dropna(subset=FBC_CODES)

    # Remove outliers from dataset
    complete_profiles, outlier_count = remove_data_outliers(biomarkers_df)

    # Constant variables to drop
    drop_features = ['BASO', 'NRBCA']

    complete_profiles = complete_profiles.drop(drop_features, axis=1)

    # Create array of the data
    biomarkers_data = complete_profiles.values

    outlier_count





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    EOS      0
    MONO     0
    BASO     0
    NEUT     0
    RBC      0
    WBC      0
    MCHC     0
    MCV      0
    LY       0
    HCT      0
    RDW      0
    HGB      0
    MCH      0
    PLT      0
    MPV      0
    NRBCA    0
    dtype: int64



.. GENERATED FROM PYTHON SOURCE LINES 58-61

-------------------------------------
Calculate data correlations
------------------------------------- 

.. GENERATED FROM PYTHON SOURCE LINES 61-119

.. code-block:: default
   :lineno-start: 62


    # Calculate correlation matrix using Pearson Correlation Coefficient
    corr_mat = complete_profiles.corr(method='pearson')

    # Create a mask
    corr_mask = np.triu(np.ones_like(corr_mat, dtype=bool))

    # Plot seaborn heatmap, histogram and PDF of correlation values.

    plt.figure(figsize=(20,8))
    plt.subplot(1,2,1)
    plt.title('Correlation Matrix for FBC panel', 
            fontweight='bold', 
            fontsize=15)

    min_v = corr_mat.values.min()
    max_v = corr_mat.values.max()
    ax = sns.heatmap(
        corr_mat,
        mask=corr_mask, 
        vmin=min_v, 
        vmax=max_v, 
        center=0,
        cmap='coolwarm',
        square=True,
        annot = True,
        annot_kws={"fontsize":8}
    )
    ax.set_xticklabels(
        ax.get_xticklabels(),
        rotation=45,
        horizontalalignment='right',
        fontsize=10
    );

    ax.set_yticklabels(
        ax.get_yticklabels(),
        fontsize=10
    );

    ax.set_yticklabels(complete_profiles.columns)
    ax.set_xticklabels(complete_profiles.columns)

    plt.subplot(1,2,2)
    plt.title('Histogram and PDF of FBC panel correlations', 
            fontweight='bold', 
            fontsize=15)
    sns.distplot(corr_mat.values.reshape(-1), 
                bins=50, 
                kde_kws={'color': 'red','linewidth': 2}, 
                hist_kws={'edgecolor':'black', 'color': 'midnightblue'})
    plt.ylabel("Density", fontsize=18)
    plt.xlabel("Correlation values", fontsize=15)
    plt.xticks(fontsize=15)
    plt.yticks(fontsize=15)
    plt.grid()
    plt.show()




.. image:: /_examples/load_dataset/images/sphx_glr_plot_corr_networks_001.png
    :alt: Correlation Matrix for FBC panel, Histogram and PDF of FBC panel correlations
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 120-123

-------------------------------------
Correlation statistics
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 123-133

.. code-block:: default
   :lineno-start: 124


    # Print the mean and std correlation value for each biomarker

    statistics = pd.DataFrame(index=corr_mat.columns)

    statistics.loc[:, 'Mean'] = np.array(corr_mat.mean())
    statistics.loc[:, 'Std'] = np.array(corr_mat.std())

    statistics






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Mean</th>
          <th>Std</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>EOS</th>
          <td>0.117357</td>
          <td>0.274304</td>
        </tr>
        <tr>
          <th>MONO</th>
          <td>0.182463</td>
          <td>0.299590</td>
        </tr>
        <tr>
          <th>NEUT</th>
          <td>0.142000</td>
          <td>0.384491</td>
        </tr>
        <tr>
          <th>RBC</th>
          <td>0.177105</td>
          <td>0.462870</td>
        </tr>
        <tr>
          <th>WBC</th>
          <td>0.207006</td>
          <td>0.368811</td>
        </tr>
        <tr>
          <th>MCHC</th>
          <td>0.079290</td>
          <td>0.299268</td>
        </tr>
        <tr>
          <th>MCV</th>
          <td>0.061560</td>
          <td>0.391111</td>
        </tr>
        <tr>
          <th>LY</th>
          <td>0.197041</td>
          <td>0.306927</td>
        </tr>
        <tr>
          <th>HCT</th>
          <td>0.211124</td>
          <td>0.447599</td>
        </tr>
        <tr>
          <th>RDW</th>
          <td>-0.111541</td>
          <td>0.361759</td>
        </tr>
        <tr>
          <th>HGB</th>
          <td>0.222353</td>
          <td>0.444830</td>
        </tr>
        <tr>
          <th>MCH</th>
          <td>0.090753</td>
          <td>0.404228</td>
        </tr>
        <tr>
          <th>PLT</th>
          <td>0.102298</td>
          <td>0.311449</td>
        </tr>
        <tr>
          <th>MPV</th>
          <td>0.069746</td>
          <td>0.299038</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 134-137

-------------------------------------
Plotting graphs using networkx
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 137-193

.. code-block:: default
   :lineno-start: 138


    # Transform correlation matrix in a links data frame (3 columns only):
    links = corr_mat.stack().reset_index()
    links.columns = ['var1', 'var2', 'value']

    # Define thresholds to investigate
    thresholds = [x/10 for x in range(1,5)]

    # Define each subplot size
    plt.figure(figsize=(15, 15))

    for plot_idx, threshold in enumerate(thresholds, start=1):
    
        # Keep only correlation over a threshold and remove self-correlations
        idx1 = abs(links['value'] > threshold) # absolute value above threshold 
        idx2 = links['var1'] != links['var2'] # self correlation
        links_filtered=links[idx1 & idx2]

        # Build graph
        G=nx.from_pandas_edgelist(links_filtered, 'var1', 'var2', 'value')

        # Get weights of the edges 
        weights = tuple(nx.get_edge_attributes(G,'value').values())
    
        # Get the degree of the nodes 
        degree = [v for k, v in nx.degree(G)]
    
        # Set for circular networks only
        pos = nx.circular_layout(G)

        plt.subplot(2, 2, plot_idx)

        # Draw the graph
        nx.draw(G, with_labels=True,pos=pos, 
                edge_cmap = plt.cm.Blues,  
                node_color='skyblue', 
                node_size=[d * 800 for d in degree], 
                linewidths=2, 
                font_size=16, 
                edge_color=weights, 
                edgecolors='black',
                font_weight='bold',
                width=3
                )
        plt.title(f'Network with weight threshold: {threshold}', 
                fontweight='bold', 
                fontsize=16)
        plt.axis('off')
        axis = plt.gca()
        axis.set_xlim([1.5*x for x in axis.get_xlim()])
        axis.set_ylim([1.5*y for y in axis.get_ylim()])

    # Space out the plots
    plt.tight_layout()

    # Show
    plt.show()


.. image:: /_examples/load_dataset/images/sphx_glr_plot_corr_networks_002.png
    :alt: Network with weight threshold: 0.1, Network with weight threshold: 0.2, Network with weight threshold: 0.3, Network with weight threshold: 0.4
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.092 seconds)


.. _sphx_glr_download__examples_load_dataset_plot_corr_networks.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_corr_networks.py <plot_corr_networks.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_corr_networks.ipynb <plot_corr_networks.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
