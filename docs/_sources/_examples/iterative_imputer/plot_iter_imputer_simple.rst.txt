
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\iterative_imputer\plot_iter_imputer_simple.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_iterative_imputer_plot_iter_imputer_simple.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_iterative_imputer_plot_iter_imputer_simple.py:


Simple Iterative Imputer Example
===========================================

Using ``sklearn`` to present a simple iterative imputer example.

.. GENERATED FROM PYTHON SOURCE LINES 9-10

Import the relevant libraries first

.. GENERATED FROM PYTHON SOURCE LINES 10-21

.. code-block:: default
   :lineno-start: 10

    import numpy as np 
    import pandas as pd
    import matplotlib.pyplot as plt
    from sklearn.experimental import enable_iterative_imputer
    from sklearn.impute import IterativeImputer
    from sklearn import preprocessing
    from sklearn.metrics import mean_squared_error
    import warnings
    warnings.filterwarnings("ignore")
    from pkgname.utils.widgets import TidyWidget








.. GENERATED FROM PYTHON SOURCE LINES 22-26

-------------------------------------
Data handling
-------------------------------------
First, let's define the data set path and relevant variables of interest

.. GENERATED FROM PYTHON SOURCE LINES 26-35

.. code-block:: default
   :lineno-start: 27


    path_data = '../load_dataset/datasets/pathology-sample-march-may.csv'

    FBC_codes = ["EOS", "MONO", "BASO", "NEUT", "RBC", "WBC", 
                    "MCHC", "MCV", "LY", "HCT", "RDW", "HGB", 
                    "MCH", "PLT", "MPV", "NRBCA"]

    INTEREST_cols = ["_uid", "orderCode", "result", "dateResult"]








.. GENERATED FROM PYTHON SOURCE LINES 38-39

Next, import only variables of interest and FBC panel results

.. GENERATED FROM PYTHON SOURCE LINES 39-62

.. code-block:: default
   :lineno-start: 39

    df = pd.read_csv(path_data, usecols=INTEREST_cols)

    df = df.loc[df['orderCode'].isin(FBC_codes)]

    df = df.dropna() # drop records of patients with NaN _uid

    df.reset_index(drop=True, inplace=True)

    # Define function to set pid (patient ID) sorted by datetime

    def change_pid_datetime_format(df):
        df['pid'] = df['_uid'].str.extract('(\d+)').astype(int)

        pid_col = df.pop('pid')

        df.insert(0, 'pid', pid_col)

        df.drop('_uid', inplace=True, axis=1)

        df.sort_values(by=['pid', 'dateResult'], inplace=True)

        return df








.. GENERATED FROM PYTHON SOURCE LINES 63-66

-------------------------------------
Transform data using TidyWidget
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 66-88

.. code-block:: default
   :lineno-start: 67


    # Parameters
    index = ['_uid', 'dateResult', 'orderCode']
    value = 'result'

    # Create widget
    widget = TidyWidget(index=index, value=value)

    # Transform (keep all)
    transform, duplicated = \
        widget.transform(df, report_duplicated=True)

    # Set pid for each patient and sort accordingly
    transform_fmt = change_pid_datetime_format(transform)

    # Transform (keep first)
    transform_first = \
        widget.transform(df, keep='first')

    # Set pid for each patient and sort accordingly
    transform_first_fmt = change_pid_datetime_format(transform_first)








.. GENERATED FROM PYTHON SOURCE LINES 89-92

-------------------------------------
Split data into input and output
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 92-99

.. code-block:: default
   :lineno-start: 93


    # Obtain the biomarkers DataFrame only
    biomarkers_df = transform_fmt.iloc[:,2:].dropna()
    biomarkers_original_df_copy = biomarkers_df.copy()

    biomarkers_data = biomarkers_df.values








.. GENERATED FROM PYTHON SOURCE LINES 100-103

-------------------------------------
Preprocessing step: normalise
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 103-109

.. code-block:: default
   :lineno-start: 104


    min_max_scaler = preprocessing.MinMaxScaler()
    val_scaled = min_max_scaler.fit_transform(biomarkers_data)
    biomarkers_df = pd.DataFrame(val_scaled)
    biomarkers_copy_df = biomarkers_df.copy()








.. GENERATED FROM PYTHON SOURCE LINES 110-113

-------------------------------------
Iterative Imputer
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 113-143

.. code-block:: default
   :lineno-start: 114


    # dictionary to store mse scores for each biomarker
    mse_scores = {}

    for biomarker in biomarkers_df.columns:

        # Randomly remove 50% of values and set to NaN
        biomarkers_df.loc[biomarkers_df.sample(frac=0.5).index, biomarker] = np.nan

        # Define imputer 
        imputer = IterativeImputer()

        # Fit on the dataset
        biomarker_tansformed_data = imputer.fit_transform(biomarkers_df)

        # Make dataframe of imputed data
        imputed_data = pd.DataFrame(data=biomarker_tansformed_data, index=[i for i in range(biomarker_tansformed_data.shape[0])], columns=[col for col in biomarkers_df.columns])

        val_pred = imputed_data[biomarker].values
        val_true = biomarkers_copy_df[biomarker].values

        # Calculate MSE score every imputed biomarker variable
        mse_score = mean_squared_error(val_true, val_pred)

        # Store it in the mse_scores dict
        mse_scores[biomarker] = mse_score

    # Create DataFrame of the dictionary
    mse_df = pd.DataFrame(mse_scores.items(), columns=['Biomarker', 'MSE Score'])








.. GENERATED FROM PYTHON SOURCE LINES 144-147

-------------------------------------
Plotting MSE Scores
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 147-154

.. code-block:: default
   :lineno-start: 148


    cols = [col for col in biomarkers_original_df_copy.columns]
    ax = mse_df.plot.bar(x='Biomarker', y='MSE Score', rot=0, grid=True, legend=False)
    ax.set_title('MSE Scores for 50 percent missing biomarkers', fontdict={'fontsize': 15, 'fontweight': 'bold'})
    ax.set_ylabel('MSE Score', fontsize=12)
    ax.set_xlabel('Biomarker', fontsize=12)
    ax.set_xticklabels(cols, rotation = 45, fontsize=12)



.. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_simple_001.png
    :alt: MSE Scores for 50 percent missing biomarkers
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [Text(0, 0, 'BASO'), Text(1, 0, 'EOS'), Text(2, 0, 'HCT'), Text(3, 0, 'HGB'), Text(4, 0, 'LY'), Text(5, 0, 'MCH'), Text(6, 0, 'MCHC'), Text(7, 0, 'MCV'), Text(8, 0, 'MONO'), Text(9, 0, 'MPV'), Text(10, 0, 'NEUT'), Text(11, 0, 'NRBCA'), Text(12, 0, 'PLT'), Text(13, 0, 'RBC'), Text(14, 0, 'RDW'), Text(15, 0, 'WBC')]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  19.755 seconds)


.. _sphx_glr_download__examples_iterative_imputer_plot_iter_imputer_simple.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_iter_imputer_simple.py <plot_iter_imputer_simple.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_iter_imputer_simple.ipynb <plot_iter_imputer_simple.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
