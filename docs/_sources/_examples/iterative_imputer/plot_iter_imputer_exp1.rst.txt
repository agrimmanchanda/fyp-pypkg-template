
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\iterative_imputer\plot_iter_imputer_exp1.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_iterative_imputer_plot_iter_imputer_exp1.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_iterative_imputer_plot_iter_imputer_exp1.py:


Iterative Imputer Experiment I
===========================================

Single biomarker removal experiment with
K-Fold Cross Validation.

.. GENERATED FROM PYTHON SOURCE LINES 10-13

-------------------------------------
Libraries import 
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 13-34

.. code-block:: default
   :lineno-start: 14


    import numpy as np 
    import pandas as pd
    import matplotlib.pyplot as plt
    from sklearn.model_selection import KFold
    from sklearn.linear_model import BayesianRidge
    from sklearn.tree import DecisionTreeRegressor
    from sklearn.ensemble import ExtraTreesRegressor
    from sklearn.neighbors import KNeighborsRegressor
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.linear_model import SGDRegressor
    from sklearn.neural_network import MLPRegressor
    from xgboost import XGBRegressor
    from sklearn.experimental import enable_iterative_imputer
    from sklearn.impute import IterativeImputer
    from sklearn.impute import SimpleImputer
    from sklearn import preprocessing
    import warnings
    warnings.filterwarnings("ignore")
    from pkgname.utils.iter_imp import *








.. GENERATED FROM PYTHON SOURCE LINES 35-38

-------------------------------------
Data import 
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 38-51

.. code-block:: default
   :lineno-start: 39


    # Set relative data path and set FBC panel list
    path_data = 'datasets/Transformed_First_FBC_dataset.csv'

    FBC_CODES = ["EOS", "MONO", "BASO", "NEUT", "RBC", "WBC", 
                    "MCHC", "MCV", "LY", "HCT", "RDW", "HGB", 
                    "MCH", "PLT", "MPV", "NRBCA"]

    # Read data and drop Nan _uid records
    df = pd.read_csv(path_data).dropna(subset=['pid'])

    df.reset_index(drop=True, inplace=True)








.. GENERATED FROM PYTHON SOURCE LINES 52-55

-------------------------------------
Remove outliers from dataset
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 55-68

.. code-block:: default
   :lineno-start: 56


    # Obtain the biomarkers DataFrame with outliers
    biomarkers_df = df[FBC_CODES].dropna(subset=FBC_CODES)

    # Make dataset copy
    biomarkers_original_df_copy = biomarkers_df.copy(deep=True)

    # Store column names
    cols = [col for col in biomarkers_df.columns]

    # Convert to array for processing 
    biomarkers_data = biomarkers_df.values








.. GENERATED FROM PYTHON SOURCE LINES 69-72

-------------------------------------
Biomarker correlations
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 72-86

.. code-block:: default
   :lineno-start: 73


    # Obtain highest correlation pairs Pearson Correlation Coefficient
    biomarkers_highest_corr = corr_pairs(biomarkers_df)

    # Find biomarkers that are to be dropped from the dataset
    biomarkers_to_drop = np.unique(biomarkers_highest_corr[['var1', 'var2']].values)

    print("\nBiomarkers with high correlations: ", biomarkers_to_drop)

    # DataFrame to store all experiment MSE scores
    rmse_score_df = pd.DataFrame(index=biomarkers_df.columns)
    rmse_score_df.index.names = ['Biomarker']
    rmsle_score_df = rmse_score_df.copy(deep=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Biomarkers with high correlations:  ['HCT' 'HGB' 'MCH' 'MCV' 'NEUT' 'RBC' 'WBC']




.. GENERATED FROM PYTHON SOURCE LINES 87-90

-------------------------------------
K-Fold Cross Validation (K = 5)
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 90-102

.. code-block:: default
   :lineno-start: 91


    # Define min-max scaler and normalise dataset
    min_max_scaler = preprocessing.StandardScaler()

    # Initialise 5-Fold cross validation
    kf5 = KFold(n_splits=5, shuffle=False, random_state=None)

    # Temporary mse_score_df to store mse score for each fold
    temp_rmse_score_df = rmse_score_df.copy(deep=True)
    temp_rmsle_score_df = rmse_score_df.copy(deep=True)









.. GENERATED FROM PYTHON SOURCE LINES 103-106

-------------------------------------
Define estimators 
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 106-123

.. code-block:: default
   :lineno-start: 107


    estimators = {
        'Bayesian Ridge': BayesianRidge(),
        # 'Decision Tree': DecisionTreeRegressor(),
        # 'Random Forest': ExtraTreesRegressor(),
        # 'XGBoost': XGBRegressor(),
        # 'K-NN': KNeighborsRegressor(weights='distance'),
        # 'Least Squares (SGD)': SGDRegressor(loss='squared_loss', 
        # early_stopping=True),
        # 'Huber (SGD)': SGDRegressor(loss='huber', early_stopping=True),
        # 'Support Vector (SGD)': SGDRegressor(loss='epsilon_insensitive', 
        # early_stopping=True),
        # 'MLP': MLPRegressor(hidden_layer_sizes=32, 
        # early_stopping=True, max_iter=100),
        'Simple Median': SimpleImputer(strategy='median'),
    }








.. GENERATED FROM PYTHON SOURCE LINES 124-127

-------------------------------------
Predict values using imputer 
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 127-195

.. code-block:: default
   :lineno-start: 128


    # Run 5-fold CV for each estimator method
    for method, imputer_estimator in estimators.items():
        for k, (train_idx, test_idx) in enumerate(kf5.split(biomarkers_data)):

            # Obtain 1-fold test and 4-fold train sets 
            train_df = biomarkers_df.iloc[train_idx]
            val_scaled =  min_max_scaler.fit(train_df)
            train_scaled = val_scaled.transform(train_df)
            train_scaled_df = pd.DataFrame(train_scaled)
            train_scaled_copy_df = train_scaled_df.copy(deep=True)
        
            test_df = biomarkers_df.iloc[test_idx]
            test_df.columns = [x for x in range(test_df.shape[1])]
            test_scaled = val_scaled.transform(test_df)
            test_scaled_df = pd.DataFrame(test_scaled)
            test_scaled_copy_df = test_scaled_df.copy(deep=True)

            # Define imputer
            if method == 'Simple Median':
                imputer = imputer_estimator
            else:
                imputer = IterativeImputer(estimator=imputer_estimator)
        
            # Fit on the dataset
            trained_imputer = imputer.fit(train_scaled_df)

            # Test each biomarker independently
            for biomarker in test_scaled_df.columns:

                # Use a clean copy of the normalised data set
                test_with_nan = test_scaled_df.copy(deep=True)

                # Strictly set every biomarker value to NaN
                col_pos = test_with_nan.columns.get_loc(biomarker)
                test_with_nan.iloc[::1, col_pos] = np.nan

                # Transform test data using trained imputer
                test_transformed_data = trained_imputer.transform(test_with_nan)

                # Make dataframe of imputed data
                imputed_data = pd.DataFrame(data=test_transformed_data, 
                index=[i for i in range(test_transformed_data.shape[0])], 
                columns=test_scaled_df.columns)

                # Inverse transform the scaled values
                test_og_data = abs(val_scaled.inverse_transform(imputed_data))

                imputed_data_og = pd.DataFrame(data=test_og_data,
                index=[i for i in range(test_transformed_data.shape[0])], 
                columns=test_scaled_df.columns)

                # Compute true and obtain real value
                val_pred = imputed_data_og[biomarker].values
                val_true = test_df[biomarker].values

                # Calculate MSE scores from the true and predicted values
                rmse_score = get_metric_scores(val_true, val_pred, 'RMSE')
                rmsle_score = get_metric_scores(val_true, val_pred, 'RMSLE')

                # Store in temp_mse_score_df and temp_rmsle_score_df 
                temp_rmse_score_df.loc[temp_rmse_score_df.index[biomarker], f'K-Fold: {k+1}'] = rmse_score
                temp_rmsle_score_df.loc[temp_rmsle_score_df.index[biomarker], f'K-Fold: {k+1}'] = rmsle_score
    
        # Calculate mean MSE score for each biomarker across the 5-folds
        rmse_score_df[f'{method}'] = temp_rmse_score_df.mean(axis=1)
        rmsle_score_df[f'{method}'] = temp_rmsle_score_df.mean(axis=1)








.. GENERATED FROM PYTHON SOURCE LINES 196-199

-------------------------------------
Table of Results: RMSE
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 199-202

.. code-block:: default
   :lineno-start: 200


    rmse_score_df






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Bayesian Ridge</th>
          <th>Simple Median</th>
        </tr>
        <tr>
          <th>Biomarker</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>EOS</th>
          <td>0.090416</td>
          <td>0.304076</td>
        </tr>
        <tr>
          <th>MONO</th>
          <td>0.092176</td>
          <td>0.439067</td>
        </tr>
        <tr>
          <th>BASO</th>
          <td>0.055443</td>
          <td>0.059771</td>
        </tr>
        <tr>
          <th>NEUT</th>
          <td>0.093367</td>
          <td>4.670707</td>
        </tr>
        <tr>
          <th>RBC</th>
          <td>0.097375</td>
          <td>0.942473</td>
        </tr>
        <tr>
          <th>WBC</th>
          <td>0.093700</td>
          <td>5.568637</td>
        </tr>
        <tr>
          <th>MCHC</th>
          <td>7.525320</td>
          <td>40.415635</td>
        </tr>
        <tr>
          <th>MCV</th>
          <td>1.556525</td>
          <td>13.382875</td>
        </tr>
        <tr>
          <th>LY</th>
          <td>0.093676</td>
          <td>2.212157</td>
        </tr>
        <tr>
          <th>HCT</th>
          <td>0.004903</td>
          <td>0.083004</td>
        </tr>
        <tr>
          <th>RDW</th>
          <td>2.013908</td>
          <td>2.990355</td>
        </tr>
        <tr>
          <th>HGB</th>
          <td>1.907417</td>
          <td>27.205640</td>
        </tr>
        <tr>
          <th>MCH</th>
          <td>0.458002</td>
          <td>4.472741</td>
        </tr>
        <tr>
          <th>PLT</th>
          <td>103.674672</td>
          <td>118.180194</td>
        </tr>
        <tr>
          <th>MPV</th>
          <td>1.155187</td>
          <td>1.599621</td>
        </tr>
        <tr>
          <th>NRBCA</th>
          <td>0.116010</td>
          <td>0.114509</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 203-206

-------------------------------------
Table of Results: RMSlE
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 206-209

.. code-block:: default
   :lineno-start: 207


    rmsle_score_df






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Bayesian Ridge</th>
          <th>Simple Median</th>
        </tr>
        <tr>
          <th>Biomarker</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>EOS</th>
          <td>0.058023</td>
          <td>0.163007</td>
        </tr>
        <tr>
          <th>MONO</th>
          <td>0.044494</td>
          <td>0.205536</td>
        </tr>
        <tr>
          <th>BASO</th>
          <td>0.040649</td>
          <td>0.047335</td>
        </tr>
        <tr>
          <th>NEUT</th>
          <td>0.017721</td>
          <td>0.539328</td>
        </tr>
        <tr>
          <th>RBC</th>
          <td>0.022307</td>
          <td>0.255991</td>
        </tr>
        <tr>
          <th>WBC</th>
          <td>0.011853</td>
          <td>0.482568</td>
        </tr>
        <tr>
          <th>MCHC</th>
          <td>0.267574</td>
          <td>0.694707</td>
        </tr>
        <tr>
          <th>MCV</th>
          <td>0.087924</td>
          <td>0.548657</td>
        </tr>
        <tr>
          <th>LY</th>
          <td>0.031921</td>
          <td>0.367702</td>
        </tr>
        <tr>
          <th>HCT</th>
          <td>0.003684</td>
          <td>0.064013</td>
        </tr>
        <tr>
          <th>RDW</th>
          <td>0.128437</td>
          <td>0.353209</td>
        </tr>
        <tr>
          <th>HGB</th>
          <td>0.075476</td>
          <td>0.609722</td>
        </tr>
        <tr>
          <th>MCH</th>
          <td>0.027191</td>
          <td>0.420535</td>
        </tr>
        <tr>
          <th>PLT</th>
          <td>0.547767</td>
          <td>0.827330</td>
        </tr>
        <tr>
          <th>MPV</th>
          <td>0.123007</td>
          <td>0.295575</td>
        </tr>
        <tr>
          <th>NRBCA</th>
          <td>0.065651</td>
          <td>0.062462</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 210-213

-------------------------------------
Combined RMSE Plot for each biomarker
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 213-223

.. code-block:: default
   :lineno-start: 214


    # Plot horizontal bar graph 
    for biomarker, scores in rmse_score_df.iterrows():
        plt.figure(figsize=(20,15))
        plt.title(f'RMSE Scores for Biomarker: {biomarker} with Different Iterative Imputation Methods', fontweight='bold', fontsize=25)
        cmap = ['green' if (x == min(scores)) else 'blue' for x in scores]
        scores.plot.barh(grid=True, color=cmap)
        plt.xticks(fontsize=18)
        plt.yticks(fontsize=18)
        plt.xlabel('RMSE Score', fontsize=18)
        plt.show()


.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_001.png
          :alt: RMSE Scores for Biomarker: EOS with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_002.png
          :alt: RMSE Scores for Biomarker: MONO with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_003.png
          :alt: RMSE Scores for Biomarker: BASO with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_004.png
          :alt: RMSE Scores for Biomarker: NEUT with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_005.png
          :alt: RMSE Scores for Biomarker: RBC with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_006.png
          :alt: RMSE Scores for Biomarker: WBC with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_007.png
          :alt: RMSE Scores for Biomarker: MCHC with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_008.png
          :alt: RMSE Scores for Biomarker: MCV with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_009.png
          :alt: RMSE Scores for Biomarker: LY with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_010.png
          :alt: RMSE Scores for Biomarker: HCT with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_011.png
          :alt: RMSE Scores for Biomarker: RDW with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_012.png
          :alt: RMSE Scores for Biomarker: HGB with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_013.png
          :alt: RMSE Scores for Biomarker: MCH with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_014.png
          :alt: RMSE Scores for Biomarker: PLT with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_015.png
          :alt: RMSE Scores for Biomarker: MPV with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_016.png
          :alt: RMSE Scores for Biomarker: NRBCA with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  37.551 seconds)


.. _sphx_glr_download__examples_iterative_imputer_plot_iter_imputer_exp1.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_iter_imputer_exp1.py <plot_iter_imputer_exp1.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_iter_imputer_exp1.ipynb <plot_iter_imputer_exp1.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
