
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\iterative_imputer\plot_iter_imputer_exp1_1_1.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_iterative_imputer_plot_iter_imputer_exp1_1_1.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_iterative_imputer_plot_iter_imputer_exp1_1_1.py:


Experiment 1: Model Evaluation
===========================================

The aim of this experiment was to remove a single feature from the data set 
and use the remaining features to predict its values to emulate a simple 
regression model. This script has results from model evaluation.

.. GENERATED FROM PYTHON SOURCE LINES 12-15

-------------------------------------
Libraries import
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 15-54

.. code-block:: default
   :lineno-start: 16


    # Libraries generic
    import numpy as np
    import pandas as pd
    import sklearn
    import seaborn as sns
    import matplotlib.pyplot as plt
    import warnings
    warnings.filterwarnings("ignore")
    from scipy import stats

    # Libraries sklearn
    from sklearn.pipeline import Pipeline
    from sklearn.model_selection import KFold
    from sklearn.model_selection import cross_validate
    from sklearn.preprocessing import StandardScaler
    from sklearn.model_selection import train_test_split

    # Regressors
    from sklearn.linear_model import LinearRegression
    from sklearn.linear_model import Ridge
    from sklearn.linear_model import BayesianRidge
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.tree import DecisionTreeRegressor
    from sklearn.ensemble import ExtraTreesRegressor
    from sklearn.linear_model import SGDRegressor
    from sklearn.neighbors import KNeighborsRegressor
    from sklearn.neural_network import MLPRegressor
    from xgboost import XGBRegressor

    # Metrics
    from sklearn.metrics import make_scorer
    from sklearn.metrics import mean_squared_error

    # Custom Packages
    from labimputer.utils.load_dataset import remove_data_outliers
    from labimputer.utils.iter_imp import corr_pairs, get_score_statistics, rmse, norm_rmse, rmsle, get_test_scores, nae, get_best_models
    from labimputer.core.iter_imp import IterativeImputerRegressor, SimpleImputerRegressor








.. GENERATED FROM PYTHON SOURCE LINES 55-58

-------------------------------------
Define tuned estimators
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 58-109

.. code-block:: default
   :lineno-start: 58

    _TUNED_ESTIMATORS = {
        'lr': LinearRegression(n_jobs=-1),
        'dt': DecisionTreeRegressor(
            criterion='mse',
            splitter='best',
            max_depth=8,
            max_leaf_nodes=15,
            min_samples_leaf=8,
            min_samples_split=8,
        ),
        'rf': ExtraTreesRegressor(
            n_estimators=100,
            criterion='mse',
            max_depth=8,
            bootstrap=False,
            warm_start=False,
            n_jobs=-1,
        ),
        'svr': SGDRegressor(
            alpha=1e-4,
            epsilon=0.05,
            learning_rate='adaptive',
            loss='squared_loss',
            early_stopping=True,
            warm_start=True,
        ),
        'knn': KNeighborsRegressor(
            n_neighbors=8,
            weights='distance',
            n_jobs=-1,
        ),
        'xgb': XGBRegressor(
            n_estimators=100,
            eval_metric='rmse',
            max_depth=10,
            eta=0.2,
            gamma=0.1,
        ),
        'mlp': MLPRegressor(
            alpha=1e-4,
            hidden_layer_sizes=32,
            solver='adam',
            learning_rate='invscaling',
            warm_start=True,
            early_stopping=True,
        ),
        'median': SimpleImputerRegressor(
            strategy='median'
        ),
    }








.. GENERATED FROM PYTHON SOURCE LINES 110-113

-------------------------------------
Data import 
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 113-142

.. code-block:: default
   :lineno-start: 114


    # Set relative data path and set FBC panel list
    path_data = '../resources/datasets/nhs/Transformed_First_FBC_dataset.csv'

    # Define FBC panel for the experiment
    FBC_CODES = sorted(["EOS", "MONO", "BASO", "NEUT", "RBC", "WBC", 
                    "MCHC", "MCV", "LY", "HCT", "RDW", "HGB", 
                    "MCH", "PLT", "MPV", "NRBCA"])

    # Read data and drop Nan _uid records
    df = pd.read_csv(path_data).dropna(subset=['pid'])

    # Reset the index to easily count all test records
    df.reset_index(drop=True, inplace=True)

    # Obtain the biomarkers DataFrame only
    raw_data = df[FBC_CODES].dropna(subset=FBC_CODES)

    # Remove outliers from dataset
    complete_profiles, _ = remove_data_outliers(raw_data)

    # Constant variables to drop
    DROP_FEATURES = ['BASO', 'NRBCA']

    # Complete profiles for complete case analysis
    complete_profiles = complete_profiles.drop(DROP_FEATURES, axis=1)

    FBC_PANEL = complete_profiles.columns








.. GENERATED FROM PYTHON SOURCE LINES 143-146

-------------------------------------
Correlation matrix
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 146-156

.. code-block:: default
   :lineno-start: 147


    # Calculate correlation matrix using Pearson Correlation Coefficient
    corr_mat = complete_profiles.corr(method='pearson')

    # Show
    print("\nData:")
    print(complete_profiles)
    print("\nCorrelation (pearson):")
    print(corr_mat)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Data:
            EOS   HCT    HGB   LY   MCH   MCHC    MCV  MONO   MPV  NEUT    PLT   RBC   RDW   WBC
    0       0.0  0.39  125.0  0.7  29.6  320.0   92.6   0.4   8.6   3.9  202.0  4.23  15.1   5.0
    6       0.0  0.37  113.0  1.1  32.0  307.0  104.0   0.7   7.4   4.0  257.0  3.53  15.1   5.9
    7       0.1  0.34  110.0  0.8  32.2  320.0  101.0   0.3   8.0   3.0  282.0  3.40  13.8   4.2
    8       0.1  0.34  108.0  0.7  32.5  321.0  101.0   0.3   8.1   3.4  282.0  3.32  14.4   4.5
    9       0.2  0.34  109.0  0.7  32.7  320.0  102.0   0.6   8.7   4.6  298.0  3.34  14.1   6.1
    ...     ...   ...    ...  ...   ...    ...    ...   ...   ...   ...    ...   ...   ...   ...
    101167  0.1  0.42  138.0  2.1  29.8  328.0   90.8   0.4   9.6   4.4  210.0  4.62  11.3   7.1
    101169  0.2  0.38  128.0  2.0  29.5  334.0   88.2   0.4   9.3   4.9  208.0  4.33  12.9   7.6
    101170  0.2  0.42  134.0  2.2  28.7  323.0   88.8   0.4   8.9   4.0  295.0  4.67  13.9   6.8
    101173  0.0  0.37  122.0  2.1  29.0  325.0   89.4   0.6  10.5   4.5  247.0  4.19  11.1   7.2
    101174  0.0  0.37  121.0  1.2  30.1  326.0   92.4   0.8   9.2   8.1  204.0  4.01  11.7  10.1

    [56271 rows x 14 columns]

    Correlation (pearson):
               EOS       HCT       HGB        LY       MCH      MCHC  ...       MPV      NEUT       PLT       RBC       RDW       WBC
    EOS   1.000000  0.075691  0.063382  0.289178 -0.046216 -0.073132  ... -0.008346 -0.077021  0.148320  0.076247 -0.029017  0.063383
    HCT   0.075691  1.000000  0.983795  0.368346  0.018124 -0.009970  ...  0.156687 -0.147780  0.044596  0.932916 -0.445215 -0.034098
    HGB   0.063382  0.983795  1.000000  0.367455  0.084460  0.160611  ...  0.148419 -0.142903  0.030526  0.921963 -0.479547 -0.030376
    LY    0.289178  0.368346  0.367455  1.000000 -0.079429  0.021764  ...  0.133033 -0.067306  0.227641  0.381424 -0.258299  0.242921
    MCH  -0.046216  0.018124  0.084460 -0.079429  1.000000  0.391104  ... -0.073755 -0.036335 -0.169143 -0.301421 -0.354513 -0.058005
    MCHC -0.073132 -0.009970  0.160611  0.021764  0.391104  1.000000  ... -0.041123  0.014154 -0.087255  0.002774 -0.237056  0.015221
    MCV  -0.016068  0.024410  0.016983 -0.097091  0.902952 -0.040685  ... -0.061824 -0.046127 -0.143448 -0.328603 -0.273143 -0.070355
    MONO  0.176592 -0.011767 -0.011822  0.228941 -0.007282 -0.006352  ...  0.006449  0.437707  0.191892 -0.011525  0.000838  0.565965
    MPV  -0.008346  0.156687  0.148419  0.133033 -0.073755 -0.041123  ...  1.000000 -0.015518 -0.329940  0.169995 -0.129583  0.021949
    NEUT -0.077021 -0.147780 -0.142903 -0.067306 -0.036335  0.014154  ... -0.015518  1.000000  0.204307 -0.125506  0.043472  0.946863
    PLT   0.148320  0.044596  0.030526  0.227641 -0.169143 -0.087255  ... -0.329940  0.204307  1.000000  0.089001 -0.050207  0.275886
    RBC   0.076247  0.932916  0.921963  0.381424 -0.301421  0.002774  ...  0.169995 -0.125506  0.089001  1.000000 -0.317913 -0.009884
    RDW  -0.029017 -0.445215 -0.479547 -0.258299 -0.354513 -0.237056  ... -0.129583  0.043472 -0.050207 -0.317913  1.000000 -0.031387
    WBC   0.063383 -0.034098 -0.030376  0.242921 -0.058005  0.015221  ...  0.021949  0.946863  0.275886 -0.009884 -0.031387  1.000000

    [14 rows x 14 columns]




.. GENERATED FROM PYTHON SOURCE LINES 157-160

-------------------------------------
Split into train-test
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 160-166

.. code-block:: default
   :lineno-start: 161


    SEED = 8

    # Train-test split of 80:20
    train_set, test_set = train_test_split(complete_profiles, shuffle=False, test_size=0.2, random_state=8)








.. GENERATED FROM PYTHON SOURCE LINES 167-170

-------------------------------------
Five fold cross validation (CVTS)
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 170-177

.. code-block:: default
   :lineno-start: 171


    # Number of splits
    n_splits = 5

    # Create Kfold instance
    skf = KFold(n_splits=n_splits, shuffle=False)








.. GENERATED FROM PYTHON SOURCE LINES 178-181

-------------------------------------------------------------
Obtain best RMSE scores from cross validation test set (CVTS)
-------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 181-223

.. code-block:: default
   :lineno-start: 182


    # Define tested methods
    METHODS = [
        'LR',
        'DT',
        'RF',
        'SVR',
        'KNN',
        'MLP',
        'XGB',
        'Median',
    ]

    # Define FBC panel for the experiment
    FBC_PANEL = sorted(["EOS", "MONO", "NEUT", "RBC", "WBC", 
                    "MCHC", "MCV", "LY", "HCT", "RDW", "HGB", 
                    "MCH", "PLT", "MPV"])

    # Read CVTS results
    cvts = pd.read_csv('datasets/iir_simple_cv_results.csv', index_col=0)

    # Get mean and variance of RMSE scores
    all_scores = get_score_statistics(cvts, metric='rmse')

    # Split scores to obtain score for each estimator
    split_scores = np.array_split(all_scores, 8)

    # Stack scores horizontally for easier plotting
    hsplit_scores = np.hstack((split_scores))

    # Create DataFrame for mean and std dev statistics
    statistics = pd.DataFrame(hsplit_scores, index=FBC_PANEL)

    # Split mean and std dev statistics
    mean_stats, std_stats = statistics.iloc[:,::2], statistics.iloc[:,1::2]

    # Rename columns to match algorithms
    mean_stats.columns, std_stats.columns = METHODS, METHODS

    # Select best models based on best CVTS score for each analyte
    BEST_MODELS = get_best_models(mean_stats)








.. GENERATED FROM PYTHON SOURCE LINES 224-227

--------------------------------------------
Model evaluation on held out test set (HOTS)
--------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 227-292

.. code-block:: default
   :lineno-start: 228


    # Set to false to prevent running during script build
    run_eval = False

    if run_eval:

        # Collect relevant scores
        test_scores = pd.DataFrame()

        # Loop for each model in best models
        for biomarker, model in BEST_MODELS.items():

            for est in [model, 'median']:

                estimator = _TUNED_ESTIMATORS[est]

                # Select estimator
                if est != 'median':
                    imputer = IterativeImputerRegressor(estimator=estimator,
                                                        min_value=0, 
                                                        max_iter=10,
                                                        verbose=2,
                                                        imputation_order='descending')
                else:
                    imputer = estimator

                # Generate new train-test for each run
                aux_train = train_set.copy()
                aux_test = test_set.copy()

                # Define independent (X_train) and dependent (y_train) variables
                X_train = aux_train[[x for x in aux_train.columns if x != biomarker]]
                y_train = aux_train[biomarker]

                # Define same variables with test set
                X_test = aux_test[[x for x in aux_test.columns if x != biomarker]]
                y_test = aux_test[biomarker]

                # Information
                print("\n Evaluating... %s for biomarker... %s" % (est, biomarker))

                # Create pipeline
                pipe = Pipeline(steps=[ ('std', StandardScaler()),
                                        (est, imputer)],
                                verbose=True)

                # Fit on training set 
                pipe.fit(X_train, y_train)

                # Generate x, y test 
                y_pred = pipe.predict(X_test)

                # Store results in DataFrame
                if est != 'median':
                    true_pred_vals = pd.DataFrame(list(zip(y_test, y_pred)),
                    columns=[f'{biomarker}-{est}-true', f'{biomarker}-{est}-pred'])
                else:
                    true_pred_vals = pd.Series(y_pred, name=f'{biomarker}-{est}')

                test_scores = pd.concat([test_scores, true_pred_vals], axis=1)

                test_scores.to_csv('datasets/iir_simple_test_results.csv')










.. GENERATED FROM PYTHON SOURCE LINES 293-296

-------------------------------------
RMSE for held out test set (HOTS)
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 296-335

.. code-block:: default
   :lineno-start: 297


    # Generate simple test results
    df = pd.read_csv('datasets/iir_simple_test_results.csv', index_col=0)

    # Split the model and median scores for each analyte
    split_data = np.split(df.T.to_numpy(), len(df.T.to_numpy())/3)

    # DataFrame for data
    data = pd.DataFrame()

    # Iterate through the predicted and median scores
    for idx, values in enumerate(zip(split_data, FBC_PANEL)):
    
        # Extract the true and predicted values
        y_true, y_pred, y_med = values[0][0], values[0][1], values[0][2]
    
        # Obtain the RMSE scores
        rmse_tp, rmse_tm = rmse(y_true, y_pred), rmse(y_true, y_med)
    
        # Join the results
        join = pd.concat([pd.Series(rmse_tp), pd.Series(rmse_tm)], axis=1)
    
        # Append
        data = data.append(join)

    # Create column names and set index
    data.columns, data.index = ['Best', 'Median'], FBC_PANEL

    # Define delta column
    data['Delta (%)'] = 100 - (100* (data['Best']/data['Median']))

    # Get the best models from CVTS
    data['Model'] = BEST_MODELS.values()

    # Get mean scores for each model
    data.loc['Mean'] = data.mean()

    data






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Best</th>
          <th>Median</th>
          <th>Delta (%)</th>
          <th>Model</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>EOS</th>
          <td>0.057908</td>
          <td>0.115717</td>
          <td>49.957552</td>
          <td>LR</td>
        </tr>
        <tr>
          <th>HCT</th>
          <td>0.003573</td>
          <td>0.064898</td>
          <td>94.494930</td>
          <td>LR</td>
        </tr>
        <tr>
          <th>HGB</th>
          <td>0.575426</td>
          <td>22.078216</td>
          <td>97.393694</td>
          <td>MLP</td>
        </tr>
        <tr>
          <th>LY</th>
          <td>0.065330</td>
          <td>0.740705</td>
          <td>91.179983</td>
          <td>LR</td>
        </tr>
        <tr>
          <th>MCH</th>
          <td>0.058018</td>
          <td>1.912420</td>
          <td>96.966247</td>
          <td>MLP</td>
        </tr>
        <tr>
          <th>MCHC</th>
          <td>0.688597</td>
          <td>9.811674</td>
          <td>92.981865</td>
          <td>MLP</td>
        </tr>
        <tr>
          <th>MCV</th>
          <td>0.203578</td>
          <td>5.434263</td>
          <td>96.253809</td>
          <td>MLP</td>
        </tr>
        <tr>
          <th>MONO</th>
          <td>0.063529</td>
          <td>0.258398</td>
          <td>75.414346</td>
          <td>LR</td>
        </tr>
        <tr>
          <th>MPV</th>
          <td>0.964480</td>
          <td>1.120377</td>
          <td>13.914663</td>
          <td>MLP</td>
        </tr>
        <tr>
          <th>NEUT</th>
          <td>0.065908</td>
          <td>2.733483</td>
          <td>97.588853</td>
          <td>LR</td>
        </tr>
        <tr>
          <th>PLT</th>
          <td>64.176731</td>
          <td>79.060396</td>
          <td>18.825690</td>
          <td>MLP</td>
        </tr>
        <tr>
          <th>RBC</th>
          <td>0.014348</td>
          <td>0.758912</td>
          <td>98.109446</td>
          <td>MLP</td>
        </tr>
        <tr>
          <th>RDW</th>
          <td>1.239479</td>
          <td>1.569379</td>
          <td>21.021072</td>
          <td>MLP</td>
        </tr>
        <tr>
          <th>WBC</th>
          <td>0.065933</td>
          <td>2.821792</td>
          <td>97.663436</td>
          <td>LR</td>
        </tr>
        <tr>
          <th>Mean</th>
          <td>4.874488</td>
          <td>9.177188</td>
          <td>74.411828</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 336-339

----------------------------
Mann Whitney U-test for HOTS
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 339-363

.. code-block:: default
   :lineno-start: 340


    # Create empty DataFrame
    mwu_df = pd.DataFrame()

    # Loop through results
    for idx, values in enumerate(zip(split_data, FBC_PANEL)):
    
        # Extract true and median scores
        y_true, y_pred, y_med = values[0][0], values[0][1], values[0][2]
    
        # Carry out MWU test
        mwu_tp, mwu_tm = stats.mannwhitneyu(y_true, y_pred)[1], stats.mannwhitneyu(y_true, y_med)[1]

        # Join relevant cores
        join = pd.concat([pd.Series(mwu_tp), pd.Series(mwu_tm)], axis=1)
    
        # Append relevant scores
        mwu_df = mwu_df.append(join)

    # Display the p-values for best and median
    mwu_df.columns, mwu_df.index = ['Best: p-value', 'Median: p-value'], FBC_PANEL

    mwu_df






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Best: p-value</th>
          <th>Median: p-value</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>EOS</th>
          <td>5.983754e-10</td>
          <td>9.233504e-03</td>
        </tr>
        <tr>
          <th>HCT</th>
          <td>3.578350e-01</td>
          <td>0.000000e+00</td>
        </tr>
        <tr>
          <th>HGB</th>
          <td>4.176523e-01</td>
          <td>0.000000e+00</td>
        </tr>
        <tr>
          <th>LY</th>
          <td>2.228882e-03</td>
          <td>2.826382e-129</td>
        </tr>
        <tr>
          <th>MCH</th>
          <td>4.216648e-01</td>
          <td>6.206950e-02</td>
        </tr>
        <tr>
          <th>MCHC</th>
          <td>3.799622e-01</td>
          <td>3.002274e-206</td>
        </tr>
        <tr>
          <th>MCV</th>
          <td>3.871731e-01</td>
          <td>5.363549e-58</td>
        </tr>
        <tr>
          <th>MONO</th>
          <td>8.629277e-09</td>
          <td>3.444842e-171</td>
        </tr>
        <tr>
          <th>MPV</th>
          <td>5.433874e-02</td>
          <td>2.439081e-20</td>
        </tr>
        <tr>
          <th>NEUT</th>
          <td>1.495287e-01</td>
          <td>2.529517e-54</td>
        </tr>
        <tr>
          <th>PLT</th>
          <td>3.585091e-06</td>
          <td>3.021526e-118</td>
        </tr>
        <tr>
          <th>RBC</th>
          <td>4.248259e-01</td>
          <td>0.000000e+00</td>
        </tr>
        <tr>
          <th>RDW</th>
          <td>2.841900e-235</td>
          <td>0.000000e+00</td>
        </tr>
        <tr>
          <th>WBC</th>
          <td>1.704366e-01</td>
          <td>1.310081e-99</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 364-367

--------------------------
NAE distribution for HOTS
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 367-410

.. code-block:: default
   :lineno-start: 368


    # Create new DataFrame
    nae_results = pd.DataFrame()

    # Loop through data
    for idx, values in enumerate(zip(split_data, FBC_PANEL)):
    
        # Get the predicted and median scores
        y_true, y_pred, y_med = values[0][0], values[0][1], values[0][2]
    
        # Get the NAE scores for predicted and median
        nae_tp, nae_tm = nae(y_true, y_pred), nae(y_true, y_med)
    
        # Get the best scores
        nae_vals = pd.DataFrame([nae_tp, 
        ['Best' for _ in range(len(nae_tp))], 
        [values[1] for _ in range(len(nae_tp))]]).T
    
        # Get the median scores
        nae_vals_med = pd.DataFrame([nae_tm, 
        ['Median' for _ in range(len(nae_tm))], 
        [values[1] for _ in range(len(nae_tm))]]).T
    
        # Join scores
        join = pd.concat([nae_vals, nae_vals_med], axis=0)
    
        # Append
        nae_results = nae_results.append(join)

    # Set columns
    nae_results.columns = ['NAE', 'Model', 'Analyte']

    # Plot the figure
    plt.figure(figsize=(20,8))

    # Create grouped boxplot 
    sns.boxplot(x = nae_results['Analyte'],
            y = nae_results['NAE'],
            hue = nae_results['Model'],
            showfliers=False
            )

    # Show
    plt.show()


.. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_1_001.png
    :alt: plot iter imputer exp1 1 1
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  26.319 seconds)


.. _sphx_glr_download__examples_iterative_imputer_plot_iter_imputer_exp1_1_1.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_iter_imputer_exp1_1_1.py <plot_iter_imputer_exp1_1_1.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_iter_imputer_exp1_1_1.ipynb <plot_iter_imputer_exp1_1_1.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
