
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\iterative_imputer\plot_iter_imputer_exp3.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_iterative_imputer_plot_iter_imputer_exp3.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_iterative_imputer_plot_iter_imputer_exp3.py:


Experiment 1 and 2: Hyperparameter tuning
===========================================

Hyperparameter tuning using ``sklearn`` 
``GridSearchCV``. 

.. GENERATED FROM PYTHON SOURCE LINES 11-14

-------------------------------------
Libraries import
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 14-46

.. code-block:: default
   :lineno-start: 15


    # Libraries generic
    import numpy as np
    import pandas as pd
    import sklearn

    # Libraries sklearn
    from sklearn.pipeline import Pipeline
    from sklearn.model_selection import GridSearchCV
    from sklearn.model_selection import KFold
    from sklearn.preprocessing import StandardScaler

    # Regressors
    from sklearn.linear_model import LinearRegression
    from sklearn.linear_model import Ridge
    from sklearn.linear_model import BayesianRidge
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.tree import DecisionTreeRegressor
    from sklearn.ensemble import ExtraTreesRegressor
    from sklearn.linear_model import SGDRegressor
    from sklearn.neighbors import KNeighborsRegressor

    # Metrics
    from sklearn.metrics import make_scorer
    from sklearn.metrics import mean_squared_error

    # Custom Packages
    from labimputer.utils.load_dataset import remove_data_outliers
    from labimputer.utils.iter_imp import corr_pairs, get_score_statistics
    from labimputer.core.iter_imp import IterativeImputerRegressor, SimpleImputerRegressor









.. GENERATED FROM PYTHON SOURCE LINES 47-50

-------------------------------------
Define parameter grids
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 50-138

.. code-block:: default
   :lineno-start: 50

    param_grid_lr = {}
    param_grid_ridge = {
        'ridge__alpha': [x / 10 for x in range(1, 11)],
    }

    param_grid_bridge = {
        'bridge__alpha_1': [1e-5, 1e-6, 1e-7],
        'bridge__alpha_2': [1e-5, 1e-6, 1e-7],
        'bridge__lambda_1': [1e-5, 1e-6, 1e-7],
        'bridge__lambda_2': [1e-5, 1e-6, 1e-7],
    }
    param_grid_iir = {
        'iir__estimator': [
            BayesianRidge()
        ]
    }

    param_grid_dt = {
        'dt__criterion': ["mse", "mae"],
        'dt__max_depth': [8, 12],
        'dt__min_samples_split': [8, 12],
        'dt__min_samples_leaf': [8, 12],
        'dt__max_leaf_nodes': [10, 15],
    }

    param_grid_etr = {
        'etr__n_estimators': [x*10 for x in range (1, 11)],
        'etr__criterion': ["mse", "mae"],
        'etr__max_depth': [8, 12],
        'etr__min_samples_split': [8, 12],
        'etr__bootstrap': [False, True],
        'etr__warm_start': [False, True]
    }

    param_grid_sgd = {
        'sgd__loss': ["squared_loss", 
                    "huber", 
                    "epsilon_insensitive",
                    "squared_epsilon_insensitive"],
        'sgd__alpha': [1e-2, 1e-3, 1e-4],
        'sgd__epsilon': [0.01, 0.05, 0.1],
        'sgd__learning_rate': ["optimal", "invscaling", "adaptive"],
        'sgd__early_stopping': [False, True],
        'sgd__warm_start': [False, True]
    }

    param_grid_knn = {
        'knn__n_neighbors': [2, 5, 8],
        'knn__weights': ["uniform", "distance"],
    }

    param_grid_sir = {
        'sir__strategy': [
            'mean',
            'median'
        ]
    }

    param_grid_rfr = {
        'rfr__n_estimators': [10, 50]
    }

    _DEFAULT_PARAM_GRIDS = {
        'lr': param_grid_lr,
        'ridge': param_grid_ridge,
        'bridge': param_grid_bridge,
        'iir': param_grid_iir,
        'rfr': param_grid_rfr,
        'dt': param_grid_dt,
        'etr': param_grid_etr,
        'sgd': param_grid_sgd,
        'knn': param_grid_knn,
        'sir': param_grid_sir,
    }

    _DEFAULT_ESTIMATORS = {
        'lr': LinearRegression(),
        'ridge': Ridge(),
        'bridge': BayesianRidge(),
        'iir': IterativeImputerRegressor(),
        'rfr': RandomForestRegressor(),
        'dt': DecisionTreeRegressor(),
        'etr': ExtraTreesRegressor(),
        'sgd': SGDRegressor(max_iter=2000),
        'knn': KNeighborsRegressor(),
        'sir': SimpleImputerRegressor(),
    }








.. GENERATED FROM PYTHON SOURCE LINES 139-142

-------------------------------------
Data import 
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 142-166

.. code-block:: default
   :lineno-start: 143


    # Set relative data path and set FBC panel list
    path_data = '../resources/datasets/nhs/Transformed_First_FBC_dataset.csv'

    FBC_CODES = ["EOS", "MONO", "BASO", "NEUT", "RBC", "WBC", 
                    "MCHC", "MCV", "LY", "HCT", "RDW", "HGB", 
                    "MCH", "PLT", "MPV", "NRBCA"]

    # Read data and drop Nan _uid records
    df = pd.read_csv(path_data).dropna(subset=['pid'])

    df.reset_index(drop=True, inplace=True)

    # Obtain the biomarkers DataFrame only
    raw_data = df[FBC_CODES].dropna(subset=FBC_CODES)

    # Remove outliers from dataset
    complete_profiles, _ = remove_data_outliers(raw_data)

    # Constant variables to drop
    DROP_FEATURES = ['BASO', 'NRBCA']

    complete_profiles = complete_profiles.drop(DROP_FEATURES, axis=1)








.. GENERATED FROM PYTHON SOURCE LINES 167-170

-------------------------------------
Correlation matrix
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 170-180

.. code-block:: default
   :lineno-start: 171


    # Calculate correlation matrix using Pearson Correlation Coefficient
    corr_mat = complete_profiles.corr(method='pearson')

    # Show
    print("\nData:")
    print(complete_profiles)
    print("\nCorrelation (pearson):")
    print(corr_mat)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Data:
            EOS  MONO  NEUT   RBC   WBC   MCHC    MCV   LY   HCT   RDW    HGB   MCH    PLT   MPV
    0       0.0   0.4   3.9  4.23   5.0  320.0   92.6  0.7  0.39  15.1  125.0  29.6  202.0   8.6
    6       0.0   0.7   4.0  3.53   5.9  307.0  104.0  1.1  0.37  15.1  113.0  32.0  257.0   7.4
    7       0.1   0.3   3.0  3.40   4.2  320.0  101.0  0.8  0.34  13.8  110.0  32.2  282.0   8.0
    8       0.1   0.3   3.4  3.32   4.5  321.0  101.0  0.7  0.34  14.4  108.0  32.5  282.0   8.1
    9       0.2   0.6   4.6  3.34   6.1  320.0  102.0  0.7  0.34  14.1  109.0  32.7  298.0   8.7
    ...     ...   ...   ...   ...   ...    ...    ...  ...   ...   ...    ...   ...    ...   ...
    101167  0.1   0.4   4.4  4.62   7.1  328.0   90.8  2.1  0.42  11.3  138.0  29.8  210.0   9.6
    101169  0.2   0.4   4.9  4.33   7.6  334.0   88.2  2.0  0.38  12.9  128.0  29.5  208.0   9.3
    101170  0.2   0.4   4.0  4.67   6.8  323.0   88.8  2.2  0.42  13.9  134.0  28.7  295.0   8.9
    101173  0.0   0.6   4.5  4.19   7.2  325.0   89.4  2.1  0.37  11.1  122.0  29.0  247.0  10.5
    101174  0.0   0.8   8.1  4.01  10.1  326.0   92.4  1.2  0.37  11.7  121.0  30.1  204.0   9.2

    [56271 rows x 14 columns]

    Correlation (pearson):
               EOS      MONO      NEUT       RBC  ...       HGB       MCH       PLT       MPV
    EOS   1.000000  0.176592 -0.077021  0.076247  ...  0.063382 -0.046216  0.148320 -0.008346
    MONO  0.176592  1.000000  0.437707 -0.011525  ... -0.011822 -0.007282  0.191892  0.006449
    NEUT -0.077021  0.437707  1.000000 -0.125506  ... -0.142903 -0.036335  0.204307 -0.015518
    RBC   0.076247 -0.011525 -0.125506  1.000000  ...  0.921963 -0.301421  0.089001  0.169995
    WBC   0.063383  0.565965  0.946863 -0.009884  ... -0.030376 -0.058005  0.275886  0.021949
    MCHC -0.073132 -0.006352  0.014154  0.002774  ...  0.160611  0.391104 -0.087255 -0.041123
    MCV  -0.016068 -0.005156 -0.046127 -0.328603  ...  0.016983  0.902952 -0.143448 -0.061824
    LY    0.289178  0.228941 -0.067306  0.381424  ...  0.367455 -0.079429  0.227641  0.133033
    HCT   0.075691 -0.011767 -0.147780  0.932916  ...  0.983795  0.018124  0.044596  0.156687
    RDW  -0.029017  0.000838  0.043472 -0.317913  ... -0.479547 -0.354513 -0.050207 -0.129583
    HGB   0.063382 -0.011822 -0.142903  0.921963  ...  1.000000  0.084460  0.030526  0.148419
    MCH  -0.046216 -0.007282 -0.036335 -0.301421  ...  0.084460  1.000000 -0.169143 -0.073755
    PLT   0.148320  0.191892  0.204307  0.089001  ...  0.030526 -0.169143  1.000000 -0.329940
    MPV  -0.008346  0.006449 -0.015518  0.169995  ...  0.148419 -0.073755 -0.329940  1.000000

    [14 rows x 14 columns]




.. GENERATED FROM PYTHON SOURCE LINES 181-184

-------------------------------------
Grid Search (with just regressor)
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 184-263

.. code-block:: default
   :lineno-start: 185


    # Number of splits
    n_splits = 5

    # Create Kfold instance
    skf = KFold(n_splits=n_splits, shuffle=False)

    # Scoring
    scoring = {
        'nmae': 'neg_mean_absolute_error', # MAE
        'nmse': 'neg_mean_squared_error',       # MSE
        'nrmse': 'neg_root_mean_squared_error', # RMSE
        #'norm_rmse': make_scorer(norm_rmse) # NRMSE
    }

    # Parameter Grid
    param_grid = {}

    # Compendium of results
    compendium = pd.DataFrame()

    # Create a list of estimators
    ESTIMATORS = [
        # 'lr',
        #'ridge',
        #'bridge',
        # 'iir',
        # 'dt',
        # 'etr',
        # 'sgd',
        # 'knn',
        # 'sir',
    ]

    # For each estimator
    for i, est in enumerate(ESTIMATORS):

        data = pd.DataFrame()

        # Basic checks
        if est not in _DEFAULT_ESTIMATORS:
            continue
        if est not in _DEFAULT_PARAM_GRIDS:
            continue

        for biomarker in complete_profiles:

            aux = complete_profiles.copy(deep=True)
            X = aux[[x for x in aux.columns if x != biomarker]]
            y = aux[biomarker]

            # Information
            print("\n%s. Evaluating... %s for biomarker... %s" % (i, est, biomarker))

            # Create pipeline
            pipe = Pipeline(steps=[ ('std', StandardScaler()),
                                    (est, _DEFAULT_ESTIMATORS[est])],
                            verbose=True)

            # Create grid search (another option is RandomSearchCV)
            grid = GridSearchCV(pipe, param_grid=_DEFAULT_PARAM_GRIDS[est],
                                cv=skf, scoring=scoring,
                                return_train_score=True, verbose=0,
                                refit=False, n_jobs=-1)

            # Fit grid search
            grid.fit(X, y)

            # Extract results
            results = pd.DataFrame(grid.cv_results_)
            results.index = ['%s_%s_%s' % (est, j, biomarker)
                for j in range(results.shape[0])]
        
            # Add to compendium
            compendium = compendium.append(results)
            data = data.append(results)
            data.to_csv(f'datasets/{est}.csv')









.. GENERATED FROM PYTHON SOURCE LINES 264-267

-------------------------------------
Show and save
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 267-273

.. code-block:: default
   :lineno-start: 268


    # # Show grid search scores
    # print("\n\nGrid Search result:")
    # print(compendium.T)

    # Save
    # compendium.to_csv('datasets/compendium.csv')







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.494 seconds)


.. _sphx_glr_download__examples_iterative_imputer_plot_iter_imputer_exp3.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_iter_imputer_exp3.py <plot_iter_imputer_exp3.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_iter_imputer_exp3.ipynb <plot_iter_imputer_exp3.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
