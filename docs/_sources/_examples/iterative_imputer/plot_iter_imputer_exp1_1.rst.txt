
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\iterative_imputer\plot_iter_imputer_exp1_1.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_iterative_imputer_plot_iter_imputer_exp1_1.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_iterative_imputer_plot_iter_imputer_exp1_1.py:


Iterative Imputer Experiment I.I
===========================================

Single biomarker removal experiment with
K-Fold Cross Validation without outliers.

.. GENERATED FROM PYTHON SOURCE LINES 10-13

-------------------------------------
Libraries import 
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 13-34

.. code-block:: default
   :lineno-start: 14


    import numpy as np 
    import pandas as pd
    import matplotlib.pyplot as plt
    from sklearn.model_selection import KFold
    from sklearn.linear_model import BayesianRidge
    from sklearn.tree import DecisionTreeRegressor
    from sklearn.ensemble import ExtraTreesRegressor
    from sklearn.neighbors import KNeighborsRegressor
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.linear_model import SGDRegressor
    from sklearn.neural_network import MLPRegressor
    from xgboost import XGBRegressor
    from sklearn.experimental import enable_iterative_imputer
    from sklearn.impute import IterativeImputer
    from sklearn.impute import SimpleImputer
    from sklearn import preprocessing
    import warnings
    warnings.filterwarnings("ignore")
    from pkgname.utils.iter_imp import *








.. GENERATED FROM PYTHON SOURCE LINES 35-38

-------------------------------------
Data import 
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 38-51

.. code-block:: default
   :lineno-start: 39


    # Set relative data path and set FBC panel list
    path_data = 'datasets/Transformed_First_FBC_dataset.csv'

    FBC_CODES = ["EOS", "MONO", "BASO", "NEUT", "RBC", "WBC", 
                    "MCHC", "MCV", "LY", "HCT", "RDW", "HGB", 
                    "MCH", "PLT", "MPV", "NRBCA"]

    # Read data and drop Nan _uid records
    df = pd.read_csv(path_data).dropna(subset=['pid'])

    df.reset_index(drop=True, inplace=True)








.. GENERATED FROM PYTHON SOURCE LINES 52-55

-------------------------------------
Remove outliers from dataset
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 55-79

.. code-block:: default
   :lineno-start: 56


    # Obtain the biomarkers DataFrame with outliers
    biomarkers_raw = df[FBC_CODES].dropna(subset=FBC_CODES)


    # Remove values based on Q(1/3) -+ 1.5 * IQR method
    q1, q3 = biomarkers_raw.quantile(0.25), biomarkers_raw.quantile(0.75)
    IQR = q3 - q1
    lower_bound = q1 - (1.5 * IQR)
    upper_bound = q3 + (1.5 * IQR)

    # New biomarkers dataframe with outlier values removed
    biomarkers_df = biomarkers_raw[~((biomarkers_raw < lower_bound) | 
    (biomarkers_raw > upper_bound)).any(axis=1)]

    # Make dataset copy
    biomarkers_original_df_copy = biomarkers_df.copy(deep=True)

    # Store column names
    cols = [col for col in biomarkers_df.columns]

    # Convert to array for processing 
    biomarkers_data = biomarkers_df.values








.. GENERATED FROM PYTHON SOURCE LINES 80-83

-------------------------------------
Biomarker correlations
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 83-97

.. code-block:: default
   :lineno-start: 84


    # Obtain highest correlation pairs Pearson Correlation Coefficient
    biomarkers_highest_corr = corr_pairs(biomarkers_df)

    # Find biomarkers that are to be dropped from the dataset
    biomarkers_to_drop = np.unique(biomarkers_highest_corr[['var1', 'var2']].values)

    print("\nBiomarkers with high correlations: ", biomarkers_to_drop)

    # DataFrame to store all experiment MSE scores
    rmse_score_df = pd.DataFrame(index=biomarkers_df.columns)
    rmse_score_df.index.names = ['Biomarker']
    rmsle_score_df = rmse_score_df.copy(deep=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Biomarkers with high correlations:  ['HCT' 'HGB' 'MCH' 'MCV' 'NEUT' 'RBC' 'WBC']




.. GENERATED FROM PYTHON SOURCE LINES 98-101

-------------------------------------
K-Fold Cross Validation (K = 5)
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 101-113

.. code-block:: default
   :lineno-start: 102


    # Define min-max scaler and normalise dataset
    min_max_scaler = preprocessing.StandardScaler()

    # Initialise 5-Fold cross validation
    kf5 = KFold(n_splits=5, shuffle=False, random_state=None)

    # Temporary mse_score_df to store mse score for each fold
    temp_rmse_score_df = rmse_score_df.copy(deep=True)
    temp_rmsle_score_df = rmse_score_df.copy(deep=True)









.. GENERATED FROM PYTHON SOURCE LINES 114-117

-------------------------------------
Define estimators 
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 117-134

.. code-block:: default
   :lineno-start: 118


    estimators = {
        'Bayesian Ridge': BayesianRidge(),
        'Decision Tree': DecisionTreeRegressor(),
        'Random Forest': ExtraTreesRegressor(),
        'XGBoost': XGBRegressor(),
        'K-NN': KNeighborsRegressor(weights='distance'),
        'Least Squares (SGD)': SGDRegressor(loss='squared_loss', 
        early_stopping=True),
        'Huber (SGD)': SGDRegressor(loss='huber', early_stopping=True),
        'Support Vector (SGD)': SGDRegressor(loss='epsilon_insensitive', 
        early_stopping=True),
        'MLP': MLPRegressor(hidden_layer_sizes=32, 
        early_stopping=True, max_iter=100),
        'Simple Median': SimpleImputer(strategy='median'),
    }








.. GENERATED FROM PYTHON SOURCE LINES 135-138

-------------------------------------
Predict values using imputer 
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 138-206

.. code-block:: default
   :lineno-start: 139


    # Run 5-fold CV for each estimator method
    for method, imputer_estimator in estimators.items():
        for k, (train_idx, test_idx) in enumerate(kf5.split(biomarkers_data)):

            # Obtain 1-fold test and 4-fold train sets 
            train_df = biomarkers_df.iloc[train_idx]
            val_scaled =  min_max_scaler.fit(train_df)
            train_scaled = val_scaled.transform(train_df)
            train_scaled_df = pd.DataFrame(train_scaled)
            train_scaled_copy_df = train_scaled_df.copy(deep=True)
        
            test_df = biomarkers_df.iloc[test_idx]
            test_df.columns = [x for x in range(test_df.shape[1])]
            test_scaled = val_scaled.transform(test_df)
            test_scaled_df = pd.DataFrame(test_scaled)
            test_scaled_copy_df = test_scaled_df.copy(deep=True)

            # Define imputer
            if method == 'Simple Median':
                imputer = imputer_estimator
            else:
                imputer = IterativeImputer(estimator=imputer_estimator)
        
            # Fit on the dataset
            trained_imputer = imputer.fit(train_scaled_df)

            # Test each biomarker independently
            for biomarker in test_scaled_df.columns:

                # Use a clean copy of the normalised data set
                test_with_nan = test_scaled_df.copy(deep=True)

                # Strictly set every biomarker value to NaN
                col_pos = test_with_nan.columns.get_loc(biomarker)
                test_with_nan.iloc[::1, col_pos] = np.nan

                # Transform test data using trained imputer
                test_transformed_data = trained_imputer.transform(test_with_nan)

                # Make dataframe of imputed data
                imputed_data = pd.DataFrame(data=test_transformed_data, 
                index=[i for i in range(test_transformed_data.shape[0])], 
                columns=test_scaled_df.columns)

                # Inverse transform the scaled values
                test_og_data = abs(val_scaled.inverse_transform(imputed_data))

                imputed_data_og = pd.DataFrame(data=test_og_data,
                index=[i for i in range(test_transformed_data.shape[0])], 
                columns=test_scaled_df.columns)

                # Compute true and obtain real value
                val_pred = imputed_data_og[biomarker].values
                val_true = test_df[biomarker].values

                # Calculate MSE scores from the true and predicted values
                rmse_score = get_metric_scores(val_true, val_pred, 'RMSE')
                rmsle_score = get_metric_scores(val_true, val_pred, 'RMSLE')

                # Store in temp_mse_score_df and temp_rmsle_score_df 
                temp_rmse_score_df.loc[temp_rmse_score_df.index[biomarker], f'K-Fold: {k+1}'] = rmse_score
                temp_rmsle_score_df.loc[temp_rmsle_score_df.index[biomarker], f'K-Fold: {k+1}'] = rmsle_score
    
        # Calculate mean MSE score for each biomarker across the 5-folds
        rmse_score_df[f'{method}'] = temp_rmse_score_df.mean(axis=1)
        rmsle_score_df[f'{method}'] = temp_rmsle_score_df.mean(axis=1)








.. GENERATED FROM PYTHON SOURCE LINES 207-210

-------------------------------------
Table of Results: RMSE
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 210-213

.. code-block:: default
   :lineno-start: 211


    rmse_score_df






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Bayesian Ridge</th>
          <th>Decision Tree</th>
          <th>Random Forest</th>
          <th>XGBoost</th>
          <th>K-NN</th>
          <th>Least Squares (SGD)</th>
          <th>Huber (SGD)</th>
          <th>Support Vector (SGD)</th>
          <th>MLP</th>
          <th>Simple Median</th>
        </tr>
        <tr>
          <th>Biomarker</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>EOS</th>
          <td>0.058294</td>
          <td>0.137839</td>
          <td>0.095585</td>
          <td>8.566184e-02</td>
          <td>0.116909</td>
          <td>0.094871</td>
          <td>0.109400</td>
          <td>0.099160</td>
          <td>0.057668</td>
          <td>0.116911</td>
        </tr>
        <tr>
          <th>MONO</th>
          <td>0.063966</td>
          <td>0.172678</td>
          <td>0.111622</td>
          <td>1.016483e-01</td>
          <td>0.219023</td>
          <td>0.078710</td>
          <td>0.161495</td>
          <td>0.071990</td>
          <td>0.063801</td>
          <td>0.260395</td>
        </tr>
        <tr>
          <th>BASO</th>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>1.618776e-16</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.150705</td>
          <td>0.000000</td>
        </tr>
        <tr>
          <th>NEUT</th>
          <td>0.066157</td>
          <td>0.192284</td>
          <td>0.098201</td>
          <td>9.317628e-02</td>
          <td>0.768844</td>
          <td>0.066237</td>
          <td>0.066270</td>
          <td>0.074788</td>
          <td>0.072393</td>
          <td>2.602406</td>
        </tr>
        <tr>
          <th>RBC</th>
          <td>0.051247</td>
          <td>0.043273</td>
          <td>0.019184</td>
          <td>2.442371e-02</td>
          <td>0.147038</td>
          <td>0.051536</td>
          <td>0.051620</td>
          <td>0.053178</td>
          <td>0.015003</td>
          <td>0.751817</td>
        </tr>
        <tr>
          <th>WBC</th>
          <td>0.066188</td>
          <td>0.194278</td>
          <td>0.096936</td>
          <td>9.484127e-02</td>
          <td>0.715558</td>
          <td>0.066322</td>
          <td>0.066296</td>
          <td>0.077568</td>
          <td>0.071578</td>
          <td>2.768599</td>
        </tr>
        <tr>
          <th>MCHC</th>
          <td>0.804123</td>
          <td>0.884185</td>
          <td>0.596445</td>
          <td>6.799949e-01</td>
          <td>6.937810</td>
          <td>0.822634</td>
          <td>0.827447</td>
          <td>0.829683</td>
          <td>0.537913</td>
          <td>9.788781</td>
        </tr>
        <tr>
          <th>MCV</th>
          <td>0.231830</td>
          <td>0.251600</td>
          <td>0.168982</td>
          <td>1.944491e-01</td>
          <td>1.892155</td>
          <td>0.236988</td>
          <td>0.237999</td>
          <td>0.239545</td>
          <td>0.171166</td>
          <td>5.900812</td>
        </tr>
        <tr>
          <th>LY</th>
          <td>0.065642</td>
          <td>0.270326</td>
          <td>0.193146</td>
          <td>1.187148e-01</td>
          <td>0.583804</td>
          <td>0.065936</td>
          <td>0.068249</td>
          <td>0.066744</td>
          <td>0.066344</td>
          <td>0.753773</td>
        </tr>
        <tr>
          <th>HCT</th>
          <td>0.003551</td>
          <td>0.003726</td>
          <td>0.002514</td>
          <td>3.080910e-03</td>
          <td>0.013621</td>
          <td>0.003662</td>
          <td>0.003699</td>
          <td>0.003597</td>
          <td>0.003121</td>
          <td>0.065571</td>
        </tr>
        <tr>
          <th>RDW</th>
          <td>1.451846</td>
          <td>1.994501</td>
          <td>1.414516</td>
          <td>1.417188e+00</td>
          <td>1.532347</td>
          <td>1.453734</td>
          <td>1.476640</td>
          <td>1.478366</td>
          <td>1.386422</td>
          <td>1.879196</td>
        </tr>
        <tr>
          <th>HGB</th>
          <td>1.046061</td>
          <td>1.382246</td>
          <td>0.887322</td>
          <td>7.598997e-01</td>
          <td>4.304529</td>
          <td>1.058549</td>
          <td>1.067277</td>
          <td>1.065919</td>
          <td>0.562459</td>
          <td>21.515179</td>
        </tr>
        <tr>
          <th>MCH</th>
          <td>0.075980</td>
          <td>0.084027</td>
          <td>0.055909</td>
          <td>6.333524e-02</td>
          <td>0.564793</td>
          <td>0.078050</td>
          <td>0.078470</td>
          <td>0.079521</td>
          <td>0.055048</td>
          <td>2.081556</td>
        </tr>
        <tr>
          <th>PLT</th>
          <td>68.079544</td>
          <td>95.969037</td>
          <td>67.718888</td>
          <td>6.810031e+01</td>
          <td>73.655717</td>
          <td>68.146017</td>
          <td>68.499864</td>
          <td>68.466659</td>
          <td>66.572377</td>
          <td>80.604096</td>
        </tr>
        <tr>
          <th>MPV</th>
          <td>1.009359</td>
          <td>1.432508</td>
          <td>1.010391</td>
          <td>1.015090e+00</td>
          <td>1.097861</td>
          <td>1.012768</td>
          <td>1.011129</td>
          <td>1.012702</td>
          <td>0.994313</td>
          <td>1.137396</td>
        </tr>
        <tr>
          <th>NRBCA</th>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>1.618776e-16</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.145408</td>
          <td>0.000000</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 214-217

-------------------------------------
Table of Results: RMSlE
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 217-220

.. code-block:: default
   :lineno-start: 218


    rmsle_score_df






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Bayesian Ridge</th>
          <th>Decision Tree</th>
          <th>Random Forest</th>
          <th>XGBoost</th>
          <th>K-NN</th>
          <th>Least Squares (SGD)</th>
          <th>Huber (SGD)</th>
          <th>Support Vector (SGD)</th>
          <th>MLP</th>
          <th>Simple Median</th>
        </tr>
        <tr>
          <th>Biomarker</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>EOS</th>
          <td>0.051316</td>
          <td>0.117546</td>
          <td>0.081766</td>
          <td>7.333371e-02</td>
          <td>0.100107</td>
          <td>0.080654</td>
          <td>0.092399</td>
          <td>0.083458</td>
          <td>0.050641</td>
          <td>0.099355</td>
        </tr>
        <tr>
          <th>MONO</th>
          <td>0.041347</td>
          <td>0.107250</td>
          <td>0.069200</td>
          <td>6.339200e-02</td>
          <td>0.135614</td>
          <td>0.049725</td>
          <td>0.099329</td>
          <td>0.045747</td>
          <td>0.041108</td>
          <td>0.159436</td>
        </tr>
        <tr>
          <th>BASO</th>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>1.618776e-16</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.134487</td>
          <td>0.000000</td>
        </tr>
        <tr>
          <th>NEUT</th>
          <td>0.014814</td>
          <td>0.042423</td>
          <td>0.023945</td>
          <td>2.050577e-02</td>
          <td>0.162473</td>
          <td>0.014817</td>
          <td>0.014829</td>
          <td>0.016844</td>
          <td>0.016650</td>
          <td>0.438348</td>
        </tr>
        <tr>
          <th>RBC</th>
          <td>0.011103</td>
          <td>0.008705</td>
          <td>0.003854</td>
          <td>4.926293e-03</td>
          <td>0.030538</td>
          <td>0.011221</td>
          <td>0.011184</td>
          <td>0.011246</td>
          <td>0.003033</td>
          <td>0.153451</td>
        </tr>
        <tr>
          <th>WBC</th>
          <td>0.009682</td>
          <td>0.027850</td>
          <td>0.014193</td>
          <td>1.372673e-02</td>
          <td>0.103951</td>
          <td>0.009714</td>
          <td>0.009699</td>
          <td>0.012347</td>
          <td>0.010696</td>
          <td>0.352867</td>
        </tr>
        <tr>
          <th>MCHC</th>
          <td>0.002466</td>
          <td>0.002711</td>
          <td>0.001830</td>
          <td>2.083470e-03</td>
          <td>0.021233</td>
          <td>0.002521</td>
          <td>0.002535</td>
          <td>0.002546</td>
          <td>0.001650</td>
          <td>0.029928</td>
        </tr>
        <tr>
          <th>MCV</th>
          <td>0.002508</td>
          <td>0.002662</td>
          <td>0.001784</td>
          <td>2.065222e-03</td>
          <td>0.020456</td>
          <td>0.002567</td>
          <td>0.002577</td>
          <td>0.002592</td>
          <td>0.001808</td>
          <td>0.064287</td>
        </tr>
        <tr>
          <th>LY</th>
          <td>0.029220</td>
          <td>0.125513</td>
          <td>0.090610</td>
          <td>5.380307e-02</td>
          <td>0.237171</td>
          <td>0.029294</td>
          <td>0.030162</td>
          <td>0.029809</td>
          <td>0.029584</td>
          <td>0.310500</td>
        </tr>
        <tr>
          <th>HCT</th>
          <td>0.002601</td>
          <td>0.002710</td>
          <td>0.001830</td>
          <td>2.244560e-03</td>
          <td>0.010012</td>
          <td>0.002684</td>
          <td>0.002713</td>
          <td>0.002631</td>
          <td>0.002275</td>
          <td>0.048126</td>
        </tr>
        <tr>
          <th>RDW</th>
          <td>0.098402</td>
          <td>0.134229</td>
          <td>0.095462</td>
          <td>9.546735e-02</td>
          <td>0.103352</td>
          <td>0.098452</td>
          <td>0.099232</td>
          <td>0.099410</td>
          <td>0.093456</td>
          <td>0.126245</td>
        </tr>
        <tr>
          <th>HGB</th>
          <td>0.009455</td>
          <td>0.011717</td>
          <td>0.007565</td>
          <td>6.563935e-03</td>
          <td>0.038579</td>
          <td>0.009634</td>
          <td>0.009743</td>
          <td>0.009473</td>
          <td>0.004893</td>
          <td>0.184858</td>
        </tr>
        <tr>
          <th>MCH</th>
          <td>0.002468</td>
          <td>0.002705</td>
          <td>0.001773</td>
          <td>2.032023e-03</td>
          <td>0.018344</td>
          <td>0.002545</td>
          <td>0.002551</td>
          <td>0.002587</td>
          <td>0.001763</td>
          <td>0.068246</td>
        </tr>
        <tr>
          <th>PLT</th>
          <td>0.362331</td>
          <td>0.480989</td>
          <td>0.350403</td>
          <td>3.512794e-01</td>
          <td>0.375210</td>
          <td>0.362645</td>
          <td>0.361707</td>
          <td>0.360641</td>
          <td>0.346085</td>
          <td>0.422514</td>
        </tr>
        <tr>
          <th>MPV</th>
          <td>0.109901</td>
          <td>0.155733</td>
          <td>0.110008</td>
          <td>1.105440e-01</td>
          <td>0.119425</td>
          <td>0.110195</td>
          <td>0.109861</td>
          <td>0.110064</td>
          <td>0.108188</td>
          <td>0.123139</td>
        </tr>
        <tr>
          <th>NRBCA</th>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>1.618776e-16</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.130317</td>
          <td>0.000000</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 221-224

-------------------------------------
Combined RMSE Plot for each biomarker
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 224-234

.. code-block:: default
   :lineno-start: 225


    # Plot horizontal bar graph 
    for biomarker, scores in rmse_score_df.iterrows():
        plt.figure(figsize=(20,15))
        plt.title(f'RMSE Scores for Biomarker: {biomarker} with Different Iterative Imputation Methods', fontweight='bold', fontsize=25)
        cmap = ['green' if (x == min(scores)) else 'blue' for x in scores]
        scores.plot.barh(grid=True, color=cmap)
        plt.xticks(fontsize=18)
        plt.yticks(fontsize=18)
        plt.xlabel('RMSE Score', fontsize=18)
        plt.show()


.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_001.png
          :alt: RMSE Scores for Biomarker: EOS with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_002.png
          :alt: RMSE Scores for Biomarker: MONO with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_003.png
          :alt: RMSE Scores for Biomarker: BASO with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_004.png
          :alt: RMSE Scores for Biomarker: NEUT with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_005.png
          :alt: RMSE Scores for Biomarker: RBC with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_006.png
          :alt: RMSE Scores for Biomarker: WBC with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_007.png
          :alt: RMSE Scores for Biomarker: MCHC with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_008.png
          :alt: RMSE Scores for Biomarker: MCV with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_009.png
          :alt: RMSE Scores for Biomarker: LY with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_010.png
          :alt: RMSE Scores for Biomarker: HCT with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_011.png
          :alt: RMSE Scores for Biomarker: RDW with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_012.png
          :alt: RMSE Scores for Biomarker: HGB with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_013.png
          :alt: RMSE Scores for Biomarker: MCH with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_014.png
          :alt: RMSE Scores for Biomarker: PLT with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_015.png
          :alt: RMSE Scores for Biomarker: MPV with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_016.png
          :alt: RMSE Scores for Biomarker: NRBCA with Different Iterative Imputation Methods
          :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 36 minutes  37.503 seconds)


.. _sphx_glr_download__examples_iterative_imputer_plot_iter_imputer_exp1_1.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_iter_imputer_exp1_1.py <plot_iter_imputer_exp1_1.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_iter_imputer_exp1_1.ipynb <plot_iter_imputer_exp1_1.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
