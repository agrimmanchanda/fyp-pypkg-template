
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\iterative_imputer\plot_iter_imputer_exp1_1.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_iterative_imputer_plot_iter_imputer_exp1_1.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_iterative_imputer_plot_iter_imputer_exp1_1.py:


Iterative Imputer Experiment I.I
===========================================

Single biomarker removal using ``sklearn``
methods only.

.. GENERATED FROM PYTHON SOURCE LINES 11-14

-------------------------------------
Libraries import
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 14-48

.. code-block:: default
   :lineno-start: 15


    # Libraries generic
    import numpy as np
    import pandas as pd
    import sklearn
    import matplotlib.pyplot as plt

    # Libraries sklearn
    from sklearn.pipeline import Pipeline
    from sklearn.model_selection import KFold
    from sklearn.model_selection import cross_validate
    from sklearn.preprocessing import StandardScaler

    # Regressors
    from sklearn.linear_model import LinearRegression
    from sklearn.linear_model import Ridge
    from sklearn.linear_model import BayesianRidge
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.tree import DecisionTreeRegressor
    from sklearn.ensemble import ExtraTreesRegressor
    from sklearn.linear_model import SGDRegressor
    from sklearn.neighbors import KNeighborsRegressor
    from sklearn.neural_network import MLPRegressor
    from xgboost import XGBRegressor

    # Metrics
    from sklearn.metrics import make_scorer
    from sklearn.metrics import mean_squared_error

    # Custom Packages
    from pkgname.utils.load_dataset import *
    from pkgname.utils.iter_imp import *
    from pkgname.core.iter_imp import IterativeImputerRegressor, SimpleImputerRegressor








.. GENERATED FROM PYTHON SOURCE LINES 49-52

-------------------------------------
Define tuned estimators
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 52-110

.. code-block:: default
   :lineno-start: 52

    _TUNED_ESTIMATORS = {
        'lr': LinearRegression(),
        'bridge': BayesianRidge(
            alpha_1=1e-05,
            alpha_2=1e-07,
            lambda_1=1e-07,
            lambda_2=1e-05,
        ),
        'dt': DecisionTreeRegressor(
            criterion='mse',
            splitter='best',
            max_depth=8,
            max_leaf_nodes=15,
            min_samples_leaf=8,
            min_samples_split=8,
        ),
        'etr': ExtraTreesRegressor(
            n_estimators=100,
            criterion='mse',
            bootstrap=False,
            warm_start=False,
            n_jobs=-1,
        ),
        'sgd-ls': SGDRegressor(
            alpha=1e-4,
            epsilon=0.05,
            learning_rate='adaptive',
            loss='squared_loss',
            early_stopping=True,
            warm_start=True,
        ),
        'sgd-sv': SGDRegressor(
            alpha=1e-4,
            epsilon=0.01,
            learning_rate='adaptive',
            loss='squared_epsilon_insensitive',
            early_stopping=True,
            warm_start=True,
        ),
        'knn': KNeighborsRegressor(
            n_neighbors=8,
            weights='distance',
            n_jobs=-1,
        ),
        'xgb': XGBRegressor(),
        'mlp': MLPRegressor(
            alpha=1e-4,
            hidden_layer_sizes=32,
            solver='adam',
            learning_rate='invscaling',
            warm_start=True,
            early_stopping=True,
        ),
        'sir': SimpleImputerRegressor(
            strategy='median'
        ),
    }








.. GENERATED FROM PYTHON SOURCE LINES 111-114

-------------------------------------
Data import 
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 114-139

.. code-block:: default
   :lineno-start: 115


    # Set relative data path and set FBC panel list
    path_data = '../resources/datasets/nhs/Transformed_First_FBC_dataset.csv'

    FBC_CODES = ["EOS", "MONO", "BASO", "NEUT", "RBC", "WBC", 
                    "MCHC", "MCV", "LY", "HCT", "RDW", "HGB", 
                    "MCH", "PLT", "MPV", "NRBCA"]

    # Read data and drop Nan _uid records
    df = pd.read_csv(path_data).dropna(subset=['pid'])

    df.reset_index(drop=True, inplace=True)

    # Obtain the biomarkers DataFrame only
    raw_data = df[FBC_CODES].dropna(subset=FBC_CODES)

    # Remove outliers from dataset
    complete_profiles, _ = remove_data_outliers(raw_data)

    # Constant variables to drop
    DROP_FEATURES = ['BASO', 'NRBCA']

    # Complete profiles for complete case analysis
    complete_profiles = complete_profiles.drop(DROP_FEATURES, axis=1)








.. GENERATED FROM PYTHON SOURCE LINES 140-143

-------------------------------------
Correlation matrix
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 143-153

.. code-block:: default
   :lineno-start: 144


    # Calculate correlation matrix using Pearson Correlation Coefficient
    corr_mat = complete_profiles.corr(method='pearson')

    # Show
    print("\nData:")
    print(complete_profiles)
    print("\nCorrelation (pearson):")
    print(corr_mat)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Data:
            EOS  MONO  NEUT   RBC   WBC   MCHC    MCV   LY   HCT   RDW    HGB   MCH    PLT   MPV
    0       0.0   0.4   3.9  4.23   5.0  320.0   92.6  0.7  0.39  15.1  125.0  29.6  202.0   8.6
    6       0.0   0.7   4.0  3.53   5.9  307.0  104.0  1.1  0.37  15.1  113.0  32.0  257.0   7.4
    7       0.1   0.3   3.0  3.40   4.2  320.0  101.0  0.8  0.34  13.8  110.0  32.2  282.0   8.0
    8       0.1   0.3   3.4  3.32   4.5  321.0  101.0  0.7  0.34  14.4  108.0  32.5  282.0   8.1
    9       0.2   0.6   4.6  3.34   6.1  320.0  102.0  0.7  0.34  14.1  109.0  32.7  298.0   8.7
    ...     ...   ...   ...   ...   ...    ...    ...  ...   ...   ...    ...   ...    ...   ...
    101167  0.1   0.4   4.4  4.62   7.1  328.0   90.8  2.1  0.42  11.3  138.0  29.8  210.0   9.6
    101169  0.2   0.4   4.9  4.33   7.6  334.0   88.2  2.0  0.38  12.9  128.0  29.5  208.0   9.3
    101170  0.2   0.4   4.0  4.67   6.8  323.0   88.8  2.2  0.42  13.9  134.0  28.7  295.0   8.9
    101173  0.0   0.6   4.5  4.19   7.2  325.0   89.4  2.1  0.37  11.1  122.0  29.0  247.0  10.5
    101174  0.0   0.8   8.1  4.01  10.1  326.0   92.4  1.2  0.37  11.7  121.0  30.1  204.0   9.2

    [56271 rows x 14 columns]

    Correlation (pearson):
               EOS      MONO      NEUT       RBC       WBC      MCHC  ...       HCT       RDW       HGB       MCH       PLT       MPV
    EOS   1.000000  0.176592 -0.077021  0.076247  0.063383 -0.073132  ...  0.075691 -0.029017  0.063382 -0.046216  0.148320 -0.008346
    MONO  0.176592  1.000000  0.437707 -0.011525  0.565965 -0.006352  ... -0.011767  0.000838 -0.011822 -0.007282  0.191892  0.006449
    NEUT -0.077021  0.437707  1.000000 -0.125506  0.946863  0.014154  ... -0.147780  0.043472 -0.142903 -0.036335  0.204307 -0.015518
    RBC   0.076247 -0.011525 -0.125506  1.000000 -0.009884  0.002774  ...  0.932916 -0.317913  0.921963 -0.301421  0.089001  0.169995
    WBC   0.063383  0.565965  0.946863 -0.009884  1.000000  0.015221  ... -0.034098 -0.031387 -0.030376 -0.058005  0.275886  0.021949
    MCHC -0.073132 -0.006352  0.014154  0.002774  0.015221  1.000000  ... -0.009970 -0.237056  0.160611  0.391104 -0.087255 -0.041123
    MCV  -0.016068 -0.005156 -0.046127 -0.328603 -0.070355 -0.040685  ...  0.024410 -0.273143  0.016983  0.902952 -0.143448 -0.061824
    LY    0.289178  0.228941 -0.067306  0.381424  0.242921  0.021764  ...  0.368346 -0.258299  0.367455 -0.079429  0.227641  0.133033
    HCT   0.075691 -0.011767 -0.147780  0.932916 -0.034098 -0.009970  ...  1.000000 -0.445215  0.983795  0.018124  0.044596  0.156687
    RDW  -0.029017  0.000838  0.043472 -0.317913 -0.031387 -0.237056  ... -0.445215  1.000000 -0.479547 -0.354513 -0.050207 -0.129583
    HGB   0.063382 -0.011822 -0.142903  0.921963 -0.030376  0.160611  ...  0.983795 -0.479547  1.000000  0.084460  0.030526  0.148419
    MCH  -0.046216 -0.007282 -0.036335 -0.301421 -0.058005  0.391104  ...  0.018124 -0.354513  0.084460  1.000000 -0.169143 -0.073755
    PLT   0.148320  0.191892  0.204307  0.089001  0.275886 -0.087255  ...  0.044596 -0.050207  0.030526 -0.169143  1.000000 -0.329940
    MPV  -0.008346  0.006449 -0.015518  0.169995  0.021949 -0.041123  ...  0.156687 -0.129583  0.148419 -0.073755 -0.329940  1.000000

    [14 rows x 14 columns]




.. GENERATED FROM PYTHON SOURCE LINES 154-157

-------------------------------------
Obtain evaluation scores
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 157-239

.. code-block:: default
   :lineno-start: 158


    # Number of splits
    n_splits = 5

    # Create Kfold instance
    skf = KFold(n_splits=n_splits, shuffle=False)

    # Scoring
    scoring = {
        'nmae': 'neg_mean_absolute_error', # MAE
        'nmse': 'neg_mean_squared_error',       # MSE
        'nrmse': 'neg_root_mean_squared_error', # RMSE
        #'norm_rmse': make_scorer(norm_rmse) # NRMSE
    }

    # Compendium of results
    iir_results = pd.DataFrame()

    # Create a list of estimators
    ESTIMATORS = [
        # 'lr',
        # 'bridge',
        # 'dt',
        # 'etr',
        # 'sgd-ls',
        # 'sgd-sv',
        # 'knn',
        # 'xgb',
        # 'sir',
    ]

    # For each estimator
    for i, est in enumerate(ESTIMATORS):

        data = pd.DataFrame()

        # Check if estimator has been defined else skip
        if est not in _TUNED_ESTIMATORS:
            continue
    
        estimator = _TUNED_ESTIMATORS[est]
    
        if estimator != 'sir':
            imputer = IterativeImputerRegressor(estimator=estimator)
        else:
            imputer = estimator

        for biomarker in complete_profiles:

            aux = complete_profiles.copy(deep=True)
            X = aux[[x for x in aux.columns if x != biomarker]]
            y = aux[biomarker]

            # Information
            print("\n%s. Evaluating... %s for biomarker... %s" % (i, est, biomarker))

            # Create pipeline
            pipe = Pipeline(steps=[ ('std', StandardScaler()),
                                    (est, imputer)],
                            verbose=True)

            # Obtain scores for each fold using cross_validate
            scores = cross_validate(pipe, 
                                    X, 
                                    y, 
                                    scoring=scoring, 
                                    cv=skf, 
                                    return_train_score=True, 
                                    n_jobs=-1, 
                                    verbose=0)
        
            # Extract results
            results = pd.DataFrame(scores)
            results.index = ['%s_%s_%s' % (biomarker, est, j)
                for j in range(results.shape[0])]
        
            # Add to compendium and data
            iir_results = iir_results.append(results)
            data = data.append(results)
            # data.to_csv(f'datasets/iir_{est}.csv')









.. GENERATED FROM PYTHON SOURCE LINES 240-243

-------------------------------------
Save results
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 243-248

.. code-block:: default
   :lineno-start: 244


    # Save
    # iir_results.to_csv('datasets/iir_results.csv')









.. GENERATED FROM PYTHON SOURCE LINES 249-252

-------------------------------------
Analyse scores and test results
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 252-292

.. code-block:: default
   :lineno-start: 253


    # Create a list of estimators
    METHODS = [
        'lr',
        'bridge',
        'dt',
        'etr',
        'sgd-ls',
        'sgd-sv',
        'knn',
        'mlp',
        # 'xgb',
        'sir',
    ]


    compendium = pd.read_csv('datasets/iir_results.csv', index_col=0)

    # Get mean and variance of RMSE scores
    all_scores = get_score_statistics(compendium, 'rmse')

    # Split scores to obtain score for each estimator
    split_scores = np.array_split(all_scores, len(METHODS))

    # Stack scores horizontally for easier plotting
    hsplit_scores = np.hstack((split_scores))

    # Create DataFrame for mean and std dev statistics
    statistics = pd.DataFrame(hsplit_scores, index=complete_profiles.columns)

    # Split mean and std dev statistics
    mean_stats, std_stats = statistics.iloc[:,::2], statistics.iloc[:,1::2]

    # Rename columns to match algorithms
    mean_stats.columns, std_stats.columns = METHODS, METHODS

    print("Mean RMSE Statistics: ")

    mean_stats





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Mean RMSE Statistics: 


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>lr</th>
          <th>bridge</th>
          <th>dt</th>
          <th>etr</th>
          <th>sgd-ls</th>
          <th>sgd-sv</th>
          <th>knn</th>
          <th>mlp</th>
          <th>sir</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>EOS</th>
          <td>0.058488</td>
          <td>0.058488</td>
          <td>0.108792</td>
          <td>0.095702</td>
          <td>0.059439</td>
          <td>0.058766</td>
          <td>0.113106</td>
          <td>0.059043</td>
          <td>0.116911</td>
        </tr>
        <tr>
          <th>MONO</th>
          <td>0.063966</td>
          <td>0.063966</td>
          <td>0.201050</td>
          <td>0.111960</td>
          <td>0.064266</td>
          <td>0.064135</td>
          <td>0.211939</td>
          <td>0.064650</td>
          <td>0.260395</td>
        </tr>
        <tr>
          <th>NEUT</th>
          <td>0.066160</td>
          <td>0.066160</td>
          <td>0.656279</td>
          <td>0.098258</td>
          <td>0.066161</td>
          <td>0.066290</td>
          <td>0.748481</td>
          <td>0.072136</td>
          <td>2.602406</td>
        </tr>
        <tr>
          <th>RBC</th>
          <td>0.051247</td>
          <td>0.051247</td>
          <td>0.205544</td>
          <td>0.019375</td>
          <td>0.051210</td>
          <td>0.051289</td>
          <td>0.141072</td>
          <td>0.016111</td>
          <td>0.751817</td>
        </tr>
        <tr>
          <th>WBC</th>
          <td>0.066188</td>
          <td>0.066188</td>
          <td>0.716875</td>
          <td>0.097273</td>
          <td>0.066186</td>
          <td>0.066316</td>
          <td>0.691134</td>
          <td>0.072144</td>
          <td>2.768599</td>
        </tr>
        <tr>
          <th>MCHC</th>
          <td>0.804123</td>
          <td>0.804123</td>
          <td>6.098773</td>
          <td>0.594074</td>
          <td>0.804267</td>
          <td>0.804433</td>
          <td>6.843804</td>
          <td>0.670137</td>
          <td>9.788781</td>
        </tr>
        <tr>
          <th>MCV</th>
          <td>0.231830</td>
          <td>0.231830</td>
          <td>1.903430</td>
          <td>0.169743</td>
          <td>0.231860</td>
          <td>0.231743</td>
          <td>1.840807</td>
          <td>0.211474</td>
          <td>5.900812</td>
        </tr>
        <tr>
          <th>LY</th>
          <td>0.065669</td>
          <td>0.065669</td>
          <td>0.576354</td>
          <td>0.189363</td>
          <td>0.065711</td>
          <td>0.065783</td>
          <td>0.569163</td>
          <td>0.066641</td>
          <td>0.753773</td>
        </tr>
        <tr>
          <th>HCT</th>
          <td>0.003551</td>
          <td>0.003551</td>
          <td>0.012595</td>
          <td>0.002508</td>
          <td>0.003551</td>
          <td>0.003762</td>
          <td>0.013079</td>
          <td>0.003458</td>
          <td>0.065571</td>
        </tr>
        <tr>
          <th>RDW</th>
          <td>1.451828</td>
          <td>1.451846</td>
          <td>1.479226</td>
          <td>1.416980</td>
          <td>1.451754</td>
          <td>1.452074</td>
          <td>1.484753</td>
          <td>1.397548</td>
          <td>1.879196</td>
        </tr>
        <tr>
          <th>HGB</th>
          <td>1.046061</td>
          <td>1.046061</td>
          <td>4.047838</td>
          <td>0.898766</td>
          <td>1.045922</td>
          <td>1.046057</td>
          <td>4.127998</td>
          <td>0.597006</td>
          <td>21.515179</td>
        </tr>
        <tr>
          <th>MCH</th>
          <td>0.075980</td>
          <td>0.075980</td>
          <td>0.645027</td>
          <td>0.055803</td>
          <td>0.075975</td>
          <td>0.075964</td>
          <td>0.546108</td>
          <td>0.064752</td>
          <td>2.081556</td>
        </tr>
        <tr>
          <th>PLT</th>
          <td>68.079100</td>
          <td>68.079544</td>
          <td>70.988611</td>
          <td>67.699751</td>
          <td>68.088919</td>
          <td>68.065699</td>
          <td>71.329544</td>
          <td>66.628538</td>
          <td>80.604096</td>
        </tr>
        <tr>
          <th>MPV</th>
          <td>1.009346</td>
          <td>1.009359</td>
          <td>1.030925</td>
          <td>1.009860</td>
          <td>1.009302</td>
          <td>1.009492</td>
          <td>1.063030</td>
          <td>0.998184</td>
          <td>1.137396</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 293-296

-------------------------------------
Plot results
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 296-323

.. code-block:: default
   :lineno-start: 297


    plt.figure(figsize=(20,40))

    # Set single title for all figures
    # plt.suptitle('Iterative Imputer RMSE scores for complete profiles', 
    #             fontweight='bold', 
    #             fontsize=12)


    for idx, (biomarker, scores) in enumerate(mean_stats.iterrows(), start=1):
        plt.subplot(7,2,idx)
        plt.title(f'RMSE for {biomarker}', 
        fontweight='bold', 
        fontsize=14)
        cmap = ['green' if (x == min(scores)) else 'royalblue' for x in scores]
        scores.plot.barh(grid=True, 
                    xerr=list(std_stats.loc[biomarker, :]), 
                    align='center', 
                    color=cmap)
        plt.xticks(fontsize=16)
        plt.yticks(fontsize=16)
        plt.xlabel('RMSE Score', fontsize=16)
    
    # Space plots out
    plt.tight_layout()

    # Show
    plt.show()


.. image:: /_examples/iterative_imputer/images/sphx_glr_plot_iter_imputer_exp1_1_001.png
    :alt: RMSE for EOS, RMSE for MONO, RMSE for NEUT, RMSE for RBC, RMSE for WBC, RMSE for MCHC, RMSE for MCV, RMSE for LY, RMSE for HCT, RMSE for RDW, RMSE for HGB, RMSE for MCH, RMSE for PLT, RMSE for MPV
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.831 seconds)


.. _sphx_glr_download__examples_iterative_imputer_plot_iter_imputer_exp1_1.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_iter_imputer_exp1_1.py <plot_iter_imputer_exp1_1.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_iter_imputer_exp1_1.ipynb <plot_iter_imputer_exp1_1.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
